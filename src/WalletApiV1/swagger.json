{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Lykke Wallet API v1"
  },
  "paths": {
    "/api/AllAssetDescription/{id}": {
      "get": {
        "tags": [ "AllAssetDescription" ],
        "operationId": "GetAllAssetDescriptionById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AssetDescriptionModel]" }
          }
        }
      }
    },
    "/api/AllAssetPairRates": {
      "get": {
        "tags": [ "AllAssetPairRates" ],
        "operationId": "GetAllAssetPairRates",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAllAssetPairsRatesModel]" }
          }
        }
      }
    },
    "/api/AllAssetPairRates/{id}": {
      "get": {
        "tags": [ "AllAssetPairRates" ],
        "operationId": "GetAllAssetPairRatesById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetSingleAssetPairRateModel]" }
          }
        }
      }
    },
    "/api/AllAssetPairs": {
      "get": {
        "tags": [ "AllAssetPairs" ],
        "operationId": "GetAllAssetPairs",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetPairsResponseModel]" }
          }
        }
      }
    },
    "/api/AllAssetPairs/{id}": {
      "get": {
        "tags": [ "AllAssetPairs" ],
        "operationId": "GetAllAssetPairsById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetPairResponseModel]" }
          }
        }
      }
    },
    "/api/ApplicationInfo": {
      "get": {
        "tags": [ "ApplicationInfo" ],
        "operationId": "GetApplicationInfo",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApplicationInfoResponseModel]" }
          }
        }
      }
    },
    "/api/AppSettings": {
      "get": {
        "tags": [ "AppSettings" ],
        "operationId": "GetAppSettings",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiAppSettingsModel]" }
          }
        }
      }
    },
    "/api/assetcategories": {
      "get": {
        "tags": [ "AssetCategory" ],
        "operationId": "GetAssetCategory",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetCategoriesResponseModel]" }
          }
        }
      }
    },
    "/api/AssetDescription/{id}": {
      "get": {
        "tags": [ "AssetDescription" ],
        "operationId": "GetAssetDescriptionById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AssetDescriptionModel]" }
          }
        }
      }
    },
    "/api/AssetDisclaimers": {
      "get": {
        "tags": [ "AssetDisclaimers" ],
        "operationId": "GetAssetDisclaimers",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AssetDisclaimerResponceModel]" }
          }
        }
      }
    },
    "/api/AssetDisclaimers/{disclaimerId}/approve": {
      "post": {
        "tags": [ "AssetDisclaimers" ],
        "operationId": "ApproveAssetDisclaimer",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "disclaimerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/AssetDisclaimers/{disclaimerId}/decline": {
      "post": {
        "tags": [ "AssetDisclaimers" ],
        "operationId": "DeclineAssetDisclaimer",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "disclaimerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/AssetPair/{id}": {
      "get": {
        "tags": [ "AssetPair" ],
        "operationId": "GetAssetPairById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetPairResponseModel]" }
          }
        }
      }
    },
    "/api/AssetPairDetailedRates": {
      "get": {
        "tags": [ "AssetPairDetailedRates" ],
        "operationId": "GetAssetPairDetailedRates",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "assetId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "points",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "withBid",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetPairDetailedRateModel]" }
          }
        }
      }
    },
    "/api/AssetPairRates": {
      "get": {
        "tags": [ "AssetPairRates" ],
        "operationId": "GetAssetPairRates",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "ignoreBase",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetPairsRatesModel]" }
          }
        }
      }
    },
    "/api/AssetPairRates/{id}": {
      "get": {
        "tags": [ "AssetPairRates" ],
        "operationId": "GetAssetPairRatesById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetPairRateModel]" }
          }
        }
      }
    },
    "/api/AssetPairs": {
      "get": {
        "tags": [ "AssetPairs" ],
        "operationId": "GetAssetPairs",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetAssetPairsResponseModel]" }
          }
        }
      }
    },
    "/api/Assets": {
      "get": {
        "tags": [ "Assets" ],
        "operationId": "GetAssets",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetBaseAssetsRespModel]" }
          }
        }
      }
    },
    "/api/Assets/{id}": {
      "get": {
        "tags": [ "Assets" ],
        "operationId": "GetAssetsById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetClientBaseAssetRespModel]" }
          }
        }
      }
    },
    "/api/Assets/description/list": {
      "post": {
        "tags": [ "Assets" ],
        "operationId": "GetAssetDescriptionsList",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/GetAssetDescriptionsListModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AssetDescriptionsListModel]" }
          }
        }
      }
    },
    "/api/Assets/{assetId}/attributes": {
      "get": {
        "tags": [ "Assets" ],
        "operationId": "GetAssetsAttributesByAssetId",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AssetAttributesModel]" }
          }
        }
      }
    },
    "/api/Assets/{assetId}/attributes/{key}": {
      "get": {
        "tags": [ "Assets" ],
        "operationId": "GetAssetsAttributesByAssetIdAndKey",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AssetAttribute]" }
          }
        }
      }
    },
    "/api/Auth": {
      "post": {
        "tags": [ "Auth" ],
        "description": "In order to get access to an api, you should go through OAuth.\n                    It's accessible through 'Autorize' button from the right-top corner of this page.\n                    If you need to get access tokens for your client app, then you should build an integration with Lykke OAuth server.",
        "operationId": "Auth",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AuthenticateModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AuthenticateResponseModel]" }
          }
        },
        "deprecated": true
      }
    },
    "/api/Auth/Authorize": {
      "post": {
        "tags": [ "Authorize" ],
        "operationId": "Authorize",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AuthenticateResponseModel]" }
          }
        }
      }
    },
    "/api/Auth/LogOut": {
      "post": {
        "tags": [ "Auth" ],
        "operationId": "LogOut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/LogoutModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/BackupCompleted": {
      "post": {
        "tags": [ "BackupCompleted" ],
        "operationId": "BackupCompleted",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/BankCardPaymentUrl": {
      "post": {
        "tags": [ "BankCardPaymentUrl" ],
        "operationId": "BankCardPaymentUrl",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/BankCardPaymentUrlInputModel" }
          },
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BankCardPaymentUrlResponceModel]" }
          }
        }
      }
    },
    "/api/BankCardPaymentUrlFormValues": {
      "get": {
        "tags": [ "BankCardPaymentUrlFormValues" ],
        "operationId": "GetBankCardPaymentUrlFormValues",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BankCardPaymentUrlInputModel]" }
          }
        }
      }
    },
    "/api/BankTransferRequest": {
      "post": {
        "tags": [ "BankTransferRequest" ],
        "operationId": "BankTransferRequest",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "transferReq",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/TransferReqModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/BaseAsset": {
      "get": {
        "tags": [ "BaseAsset" ],
        "operationId": "GetBaseAsset",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetClientBaseAssetRespModel]" }
          }
        }
      },
      "post": {
        "tags": [ "BaseAsset" ],
        "operationId": "SetBaseAsset",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostClientBaseCurrencyModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetClientBaseAssetRespModel]" }
          }
        }
      }
    },
    "/api/BaseAssets": {
      "get": {
        "tags": [ "BaseAssets" ],
        "operationId": "GetBaseAssetList",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetBaseAssetsRespModel]" }
          }
        }
      }
    },
    "/api/BcnTransaction": {
      "get": {
        "tags": [ "BcnTransaction" ],
        "operationId": "GetBcnTransaction",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BlockchainTransactionRespModel]" }
          }
        }
      }
    },
    "/api/BitcoinCash/multisig/balance": {
      "get": {
        "tags": [ "BitcoinCash" ],
        "operationId": "GetMultisigBalanceBitcoinCash",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BccMultisigTransactionResponseModel]" }
          }
        }
      }
    },
    "/api/BitcoinCash/multisig/transaction": {
      "get": {
        "tags": [ "BitcoinCash" ],
        "operationId": "GetMultisigTransactionBitcoinCash",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "destinationAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BccTransactionResponseModel]" }
          }
        }
      }
    },
    "/api/BitcoinCash/private/balance": {
      "get": {
        "tags": [ "BitcoinCash" ],
        "operationId": "GetPrivateBalanceBitcoinCash",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BccPrivateBalanceModel]" }
          }
        }
      }
    },
    "/api/BitcoinCash/private/transaction": {
      "get": {
        "tags": [ "BitcoinCash" ],
        "operationId": "GetPrivateTransactionBitcoinCash",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "sourceAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "destinationAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BccTransactionResponseModel]" }
          }
        }
      }
    },
    "/api/BitcoinCash/broadcast": {
      "post": {
        "tags": [ "BitcoinCash" ],
        "operationId": "BroadcastTransactionBitcoinCash",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/BccBroadcastRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BccBroadcastResponseModel]" }
          }
        }
      }
    },
    "/api/BlockchainTransaction": {
      "get": {
        "tags": [ "BlockchainTransaction" ],
        "operationId": "GetBlockchainTransaction",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "blockChainHash",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BlockchainTransactionRespModel]" }
          }
        }
      }
    },
    "/api/BroadcastTransaction": {
      "post": {
        "tags": [ "BroadcastTransaction" ],
        "operationId": "BroadcastTransaction",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "transaction",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/ApiTransaction" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/ChangePinAndPassword": {
      "post": {
        "tags": [ "ChangePinAndPassword" ],
        "operationId": "ChangePinAndPassword",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostChangePinAndPasswordModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/CheckDocumentsToUpload": {
      "get": {
        "tags": [ "CheckDocumentsToUpload" ],
        "operationId": "GetCheckDocumentsToUpload",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[CheckDocumentsToUploadModel]" }
          }
        }
      }
    },
    "/api/CheckMobilePhone": {
      "post": {
        "tags": [ "CheckMobilePhone" ],
        "operationId": "CheckMobilePhoneRequest",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "phoneModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostClientPhoneModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/CheckMobilePhone/checkMobilePhone": {
      "post": {
        "tags": [ "CheckMobilePhone" ],
        "operationId": "PostCheckMobilePhoneValidate",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CheckMobilePhoneRequestModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[CheckMobilePhoneResultModel]" }
          }
        }
      }
    },
    "/api/Client/codes": {
      "get": {
        "tags": [ "Client" ],
        "operationId": "RequestCodes",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      },
      "post": {
        "tags": [ "Client" ],
        "operationId": "SubmitCode",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/SubmitCodeModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AccessTokenModel]" }
          }
        }
      }
    },
    "/api/Client/keys/encodedmainkey": {
      "post": {
        "tags": [ "Client" ],
        "operationId": "RequestEncodedMainKey",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AccessTokenModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EncodedKeyModel]" }
          }
        }
      }
    },
    "/api/Client/balances/{baseAsset}": {
      "get": {
        "tags": [ "Client" ],
        "operationId": "GetBalancesInBaseAsset",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "baseAsset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ClientBalancesModel]" }
          }
        }
      }
    },
    "/api/Client/pushTxDialogOk": {
      "post": {
        "tags": [ "Client" ],
        "operationId": "PushTxDialogOk",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Client/dictionary/{key}": {
      "get": {
        "tags": [ "Client" ],
        "operationId": "ClientDictionaryGetKeyValueByKey",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IKeyValue]" }
          }
        }
      },
      "delete": {
        "tags": [ "Client" ],
        "operationId": "ClientDictionaryDeleteKeyValueByKey",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Client/dictionary": {
      "put": {
        "tags": [ "Client" ],
        "operationId": "ClientDictionaryPutKeyValue",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "keyValue",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/KeyValue" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      },
      "post": {
        "tags": [ "Client" ],
        "operationId": "ClientDictionarySaveKeyValue",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "keyValue",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/KeyValue" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Client/properties/isUserFromUS": {
      "get": {
        "tags": [ "Client" ],
        "operationId": "GetClientPropertyIsUsaUser",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IsUserFromUSModel]" }
          }
        }
      },
      "post": {
        "tags": [ "Client" ],
        "operationId": "SetClientPropertyUsaUser",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/SetIsUserFromUSModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Client/{sessionId}/promoteSession": {
      "post": {
        "tags": [ "Client" ],
        "operationId": "ClientSessionPromoteSession",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          },
          {
            "name": "SignatureVerificationToken",
            "in": "header",
            "description": "signature verification token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Client/cancelPromote": {
      "post": {
        "tags": [ "Client" ],
        "operationId": "ClientCancelPromoteSessions",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Client/pendingActions": {
      "get": {
        "tags": [ "Client" ],
        "operationId": "ClientGetPendingActions",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PendingActionsModel]" }
          }
        }
      }
    },
    "/api/ClientCountry": {
      "post": {
        "tags": [ "ClientCountry" ],
        "operationId": "ClientCountryPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostClientCountryModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/ClientFirstNameLastName": {
      "post": {
        "tags": [ "ClientFirstNameLastName" ],
        "operationId": "ClientFirstNameLastNamePost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostClientFirstNameLastNameModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/ClientFullName": {
      "post": {
        "tags": [ "ClientFullName" ],
        "operationId": "ClientFullNamePost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "fullNameModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostClientFullNameModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/ClientKeys": {
      "post": {
        "tags": [ "ClientKeys" ],
        "operationId": "ClientKeysPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/ClientKeysModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/ClientLog": {
      "post": {
        "tags": [ "ClientLog" ],
        "operationId": "ClientLogPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/WriteClientLogModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/ClientState/getState": {
      "get": {
        "tags": [ "ClientState" ],
        "operationId": "GetClientState",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ClientStateModel]" }
          }
        }
      }
    },
    "/api/ClientTrading/termsOfUse": {
      "get": {
        "tags": [ "ClientTrading" ],
        "operationId": "ClientTradingGetTermsOfUse",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[TermsOfUseModel]" }
          }
        }
      }
    },
    "/api/ClientTrading/termsOfUse/margin/agree": {
      "post": {
        "tags": [ "ClientTrading" ],
        "operationId": "ClientTradingAgreeMarginTerms",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/CountryPhoneCodes": {
      "get": {
        "tags": [ "CountryPhoneCodes" ],
        "operationId": "GetCountryPhoneCodes",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[CountriesResponseModel]" }
          }
        }
      }
    },
    "/api/D3User": {
      "post": {
        "tags": [ "D3User" ],
        "operationId": "AddD3User",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddD3UserRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/client/Dialogs": {
      "get": {
        "tags": [ "Dialogs" ],
        "operationId": "ClientDialogsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ClientDialogsModel]" }
          }
        }
      },
      "post": {
        "tags": [ "Dialogs" ],
        "operationId": "ClientDialogsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/ClientDialogSubmitModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Dictionary/{key}": {
      "get": {
        "tags": [ "Dictionary" ],
        "operationId": "DictionaryGetKeyValueByKey",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IKeyValue]" }
          }
        }
      }
    },
    "/api/Dictionary": {
      "get": {
        "tags": [ "Dictionary" ],
        "operationId": "DictionaryGetAll",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IKeyValue[]]" }
          }
        }
      }
    },
    "/api/Dicts/assets": {
      "get": {
        "tags": [ "Dicts" ],
        "operationId": "GetDictsAssets",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AssetDictRespModel]" }
          }
        }
      }
    },
    "/api/Dicts/updates": {
      "get": {
        "tags": [ "Dicts" ],
        "operationId": "GetDictsAssetUpdates",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[DictionariesUpdatesRespModel]" }
          }
        }
      }
    },
    "/api/kyc/Documents/file/{fileId}": {
      "get": {
        "tags": [ "Documents" ],
        "operationId": "DocumentsGetFileAsync",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/FileStreamResult" }
          }
        },
        "deprecated": true
      }
    },
    "/api/kyc/Documents/type/{documentType}/file": {
      "post": {
        "tags": [ "Documents" ],
        "operationId": "DocumentsUploadFileByDocType",
        "consumes": [ "multipart/form-data" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "documentType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        },
        "deprecated": true
      }
    },
    "/api/kyc/Documents/type/{documentType}/file/{fileType}": {
      "post": {
        "tags": [ "Documents" ],
        "operationId": "DocumentsUploadFileByDocTypeAndFileType",
        "consumes": [ "multipart/form-data" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "documentType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        },
        "deprecated": true
      }
    },
    "/api/Email/PrivateWalletAddress": {
      "post": {
        "tags": [ "Email" ],
        "operationId": "EmailPrivateWalletAddress",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/WalletAddressModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/EmailMeWalletAddress": {
      "post": {
        "tags": [ "EmailMeWalletAddress" ],
        "operationId": "EmailMeWalletAddress",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "reqModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostEmailMeRequestModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/EmailVerification": {
      "post": {
        "tags": [ "EmailVerification" ],
        "operationId": "EmailVerificationRequest",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostEmailModel" }
          },
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/EmailVerification/verifyEmail": {
      "post": {
        "tags": [ "EmailVerification" ],
        "operationId": "EmailVerificationVerify",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/VerifyEmailRequestModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EmailVerificationModel]" }
          }
        }
      }
    },
    "/api/Ethereum/{operationId}/transfer": {
      "post": {
        "tags": [ "Ethereum" ],
        "operationId": "EthereumTransferOperation",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/EthereumTransferModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumSuccessTradeRespModel]" }
          }
        }
      }
    },
    "/api/Ethereum/{operationId}/hash": {
      "post": {
        "tags": [ "Ethereum" ],
        "operationId": "EthereumHashOperation",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumEmptyTransactionModel]" }
          }
        }
      }
    },
    "/api/Ethereum/transfers": {
      "get": {
        "tags": [ "Ethereum" ],
        "operationId": "GetEthereumTransfers",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumEmptyTransactionModelContainer]" }
          }
        }
      },
      "post": {
        "tags": [ "Ethereum" ],
        "operationId": "EthereumMoveToTrust",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "operations",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/EthereumTransactionModelContainer" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Ethereum/privateWallet/generateTransaction": {
      "post": {
        "tags": [ "Ethereum" ],
        "operationId": "EthereumPrivateWalletGenerateTransactionForEthereum",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/GenerateTransferTransactionForEthereumModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthTransaction]" }
          }
        }
      }
    },
    "/api/Ethereum/privateWallet/broadcastTransaction": {
      "post": {
        "tags": [ "Ethereum" ],
        "operationId": "EthereumPrivateWalletBroadcastEthereumTransaction",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "transaction",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/EthTransaction" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[TransactionHashModel]" }
          }
        }
      }
    },
    "/api/Ethereum/privateWallet/estimateTransaction": {
      "post": {
        "tags": [ "Ethereum" ],
        "operationId": "EthereumPrivateWalletEstimateEthereumTransaction",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "transaction",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/EthTransaction" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ExecutionEstimationResponse]" }
          }
        }
      }
    },
    "/api/Ethereum/privateWallet/v2/estimateTransaction": {
      "post": {
        "tags": [ "Ethereum" ],
        "operationId": "EthereumPrivateWalletEstimateEthereumTransactionV2",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "transaction",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/EstimateTransferTransactionForEthereumModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ExecutionEstimationV2Response]" }
          }
        }
      }
    },
    "/api/Ethereum/getCurrentNetworkGas": {
      "get": {
        "tags": [ "Ethereum" ],
        "operationId": "GetEthereumCurrentNetworkGasAsync",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthBalance]" }
          }
        }
      }
    },
    "/api/Ethereum/tx/{transactionHash}": {
      "get": {
        "tags": [ "Ethereum" ],
        "operationId": "GetEthereumHistoryByTxHash",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "transactionHash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumTransactionResponseContainer]" }
          }
        }
      }
    },
    "/api/Ethereum/history/{address}": {
      "get": {
        "tags": [ "Ethereum" ],
        "operationId": "GetEthereumHistoryByAddress",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000
          },
          {
            "name": "assetId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumPrivateWalletHistory]" }
          }
        }
      }
    },
    "/api/Ethereum/settings": {
      "get": {
        "tags": [ "Ethereum" ],
        "operationId": "GetEthereumPrivateWalletSettings",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumAssetResponse]" }
          }
        }
      }
    },
    "/api/ethereum/private-wallets/{address}/history/eth": {
      "get": {
        "tags": [ "EthereumPrivateWallets" ],
        "operationId": "GetEthereumPrivateWalletHistoryByAddress",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumPrivateWalletV2History]" }
          }
        }
      }
    },
    "/api/ethereum/private-wallets/{address}/history/erc20/{assetId}": {
      "get": {
        "tags": [ "EthereumPrivateWallets" ],
        "operationId": "GetPrivateWalletErc20HistoryForAssetId",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumPrivateWalletV2History]" }
          }
        }
      }
    },
    "/api/ethereum/private-wallets/{address}/history/erc20": {
      "get": {
        "tags": [ "EthereumPrivateWallets" ],
        "operationId": "GetPrivateWalletErc20HistoryV2",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[EthereumPrivateWalletV2History]" }
          }
        }
      }
    },
    "/api/ExchangeInfo": {
      "get": {
        "tags": [ "ExchangeInfo" ],
        "operationId": "GetExchangeInfo",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "exchangeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiMarketOrder]" }
          }
        }
      }
    },
    "/api/FormatCreditVouchersContent": {
      "post": {
        "tags": [ "FormatCreditVouchersContent" ],
        "operationId": "FormatCreditVouchersContentPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreditVoucherContent" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[CreditVoucherFormattedContent]" }
          }
        }
      }
    },
    "/api/operations/ForwardWithdrawal": {
      "post": {
        "tags": [ "ForwardWithdrawal" ],
        "operationId": "OperationForwardWithdrawalPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/ForwardWithdrawalModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/GenerateTransferTransaction": {
      "post": {
        "tags": [ "GenerateTransferTransaction" ],
        "operationId": "Post",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/GenerateTransferTransactionForBitcoinModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiTransaction]" }
          }
        }
      }
    },
    "/api/GraphPeriods": {
      "get": {
        "tags": [ "GraphPeriods" ],
        "operationId": "GetGraphPeriods",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetGraphPeriodsRespModel]" }
          }
        }
      }
    },
    "/api/HashedPwd": {
      "post": {
        "tags": [ "HashedPwd" ],
        "operationId": "Post",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PasswordHashModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/History": {
      "get": {
        "tags": [ "History" ],
        "operationId": "GetHistory",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[HistoryRecordModel]]" }
          }
        }
      }
    },
    "/api/History/limit/trades": {
      "get": {
        "tags": [ "History" ],
        "operationId": "GetHistoryLimitTrades",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[HistoryRecordModel]]" }
          }
        }
      }
    },
    "/api/History/limit/order": {
      "get": {
        "tags": [ "History" ],
        "operationId": "GetHistoryLimitOrder",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiLimitOrder]" }
          }
        }
      }
    },
    "/api/History/limit/history": {
      "get": {
        "tags": [ "History" ],
        "operationId": "GetHistoryLimitHistory",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[HistoryRecordModel]]" }
          }
        }
      }
    },
    "/api/HotWallet/marketOrder": {
      "post": {
        "tags": [ "HotWallet" ],
        "operationId": "HotWalletPlaceMarketOrder",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/HotWalletOperation" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          },
          {
            "name": "SignatureVerificationToken",
            "in": "header",
            "description": "signature verification token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[HotWalletSuccessTradeRespModel]" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel[HotWalletSuccessTradeRespModel]" }
          },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/HotWallet/limitOrder": {
      "post": {
        "tags": [ "HotWallet" ],
        "operationId": "HotWalletPlaceLimitOrder",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/HotWalletLimitOperation" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          },
          {
            "name": "SignatureVerificationToken",
            "in": "header",
            "description": "signature verification token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[HotWalletSuccessTradeRespModel]" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel[HotWalletSuccessTradeRespModel]" }
          },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/HotWallet/cashout": {
      "post": {
        "tags": [ "HotWallet" ],
        "operationId": "HotWalletCashout",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/HotWalletCashoutOperation" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          },
          {
            "name": "SignatureVerificationToken",
            "in": "header",
            "description": "signature verification token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/HotWallet/addresses/{destinationAddress}/{assetId}/validity": {
      "get": {
        "tags": [ "HotWallet" ],
        "operationId": "HotWalletAddressesValidity",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "addressExtension",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "destinationAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[BlockchainAddressValidityResponseModel]" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel[BlockchainAddressValidityResponseModel]" }
          },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/IcoCoinsSold": {
      "get": {
        "tags": [ "IcoCoinsSold" ],
        "operationId": "GetIcoCoinsSold",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetIcoCounsSoldResponseModel]" }
          }
        }
      }
    },
    "/api/InvertedAssetPairs": {
      "post": {
        "tags": [ "InvertedAssetPairs" ],
        "operationId": "InvertedAssetPairsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostRevertAssetPairModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/IsAlive": {
      "get": {
        "tags": [ "IsAlive" ],
        "operationId": "GetIsAlive",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/IsAliveResponse" }
          }
        }
      }
    },
    "/api/IsPinEntered": {
      "get": {
        "tags": [ "IsPinEntered" ],
        "operationId": "GetIsPinEntered",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IsPinSecurityEnabledResultModel]" }
          }
        }
      }
    },
    "/api/Issuers": {
      "get": {
        "tags": [ "Issuers" ],
        "operationId": "GetIssuers",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[ApiIssuer]]" }
          }
        }
      }
    },
    "/api/Issuers/{id}": {
      "get": {
        "tags": [ "Issuers" ],
        "operationId": "GetIssuersById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiIssuer]" }
          }
        }
      }
    },
    "/api/KycDocuments": {
      "get": {
        "tags": [ "KycDocuments" ],
        "operationId": "GetKycDocuments",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[KycDocumentsModel]" }
          }
        }
      },
      "post": {
        "tags": [ "KycDocuments" ],
        "operationId": "KycDocumentsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/KycDocumentsModelDeprecated" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PostKycDocumentRespModel]" }
          }
        }
      }
    },
    "/api/KycDocumentsBin/{id}": {
      "get": {
        "tags": [ "KycDocumentsBin" ],
        "operationId": "GetKycDocumentsBinById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "width",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/api/KycDocumentsBin": {
      "post": {
        "tags": [ "KycDocumentsBin" ],
        "operationId": "KycDocumentsBinPost",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ext",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "idType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [ "Unknown", "Passport", "Id", "DrivingLicense" ],
            "x-ms-enum": {
              "name": "IdCardType",
              "modelAsString": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PostKycDocumentRespModel]" }
          }
        }
      }
    },
    "/api/KycDocumentUpload": {
      "post": {
        "tags": [ "KycDocumentUpload" ],
        "operationId": "KycDocumentUploadPost",
        "consumes": [ "multipart/form-data" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFile",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "photo",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "idType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [ "Unknown", "Passport", "Id", "DrivingLicense" ],
            "x-ms-enum": {
              "name": "IdCardType",
              "modelAsString": false
            }
          },
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PostKycDocumentRespModel]" }
          }
        }
      }
    },
    "/api/KycFiles/{fileId}": {
      "get": {
        "tags": [ "KycFiles" ],
        "operationId": "GetFileByFileId",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/FileStreamResult" }
          }
        }
      }
    },
    "/api/KycFiles": {
      "post": {
        "tags": [ "KycFiles" ],
        "operationId": "KycFilesUploadFile",
        "consumes": [ "multipart/form-data" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "documentType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/KycForAsset/{id}": {
      "get": {
        "tags": [ "KycForAsset" ],
        "operationId": "GetKycForAssetById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[KycForAssetResponseModel]" }
          }
        }
      }
    },
    "/api/KycProfiles/{profileType}": {
      "get": {
        "tags": [ "KycProfiles" ],
        "operationId": "GetKycProfilesByType",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "profileType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[KycProfilesResponseModel]" }
          }
        }
      },
      "post": {
        "tags": [ "KycProfiles" ],
        "operationId": "KycProfilesSubmit",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "profileType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [ "Advanced", "ProIndividual" ],
            "x-ms-enum": {
              "name": "AccountTierModel",
              "modelAsString": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/KycProfiles/{profileType}/documents": {
      "get": {
        "tags": [ "KycProfiles" ],
        "operationId": "GetKycProfilesDocumentsByProfileType",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "profileType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[Dictionary[String,DocumentModel]]" }
          }
        }
      }
    },
    "/api/KycStatus": {
      "get": {
        "tags": [ "KycStatus" ],
        "operationId": "GetKycStatus",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetKycStatusRespModel]" }
          }
        }
      },
      "post": {
        "tags": [ "KycStatus" ],
        "operationId": "KycStatusPost",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PostKycStatusRespModel]" }
          }
        }
      }
    },
    "/api/LastBaseAssets": {
      "get": {
        "tags": [ "LastBaseAssets" ],
        "operationId": "GetLastBaseAssets",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "n",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetLastBaseAssetsRespModel]" }
          }
        }
      }
    },
    "/api/offchain/limit/list": {
      "get": {
        "tags": [ "LimitOrders" ],
        "operationId": "OffchainLimitList",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetPair",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainLimitOrdersRespModel]" }
          }
        }
      }
    },
    "/api/offchain/limit/count": {
      "get": {
        "tags": [ "LimitOrders" ],
        "operationId": "OffchainLimitCount",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainLimitOrdersCountRespModel]" }
          }
        }
      }
    },
    "/api/LykkeNews": {
      "get": {
        "tags": [ "LykkeNews" ],
        "operationId": "GetLykkeNews",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[ILykkeNewsRecord]]" }
          }
        }
      }
    },
    "/api/MarginTrading/account/balance": {
      "post": {
        "tags": [ "MarginTrading" ],
        "operationId": "MarginTradingChangeAccountBalance",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/ChangeMarginAccountBalanceModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/MarginTrading/account/reset/{accountId}": {
      "delete": {
        "tags": [ "MarginTrading" ],
        "operationId": "MarginTradingResetAccount",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/MarginTrading/cashOutSwift": {
      "post": {
        "tags": [ "MarginTrading" ],
        "operationId": "MarginTradingCashOutSwift",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/MarginSwiftCashOutReqModel" }
          },
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Market/converter/tobase": {
      "post": {
        "tags": [ "Market" ],
        "operationId": "MarketConverterToBase",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/ToBaseConvertionRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ToBaseConvertionResponse]" }
          }
        }
      }
    },
    "/api/MyLykkeCashInEmail": {
      "post": {
        "tags": [ "MyLykkeCashInEmail" ],
        "operationId": "MyLykkeCashInEmail",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "reqModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostMyLykkeCashInEmailModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/MyLykkeInfo": {
      "get": {
        "tags": [ "MyLykkeInfo" ],
        "operationId": "GetMyLykkeInfo",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetMyLykkeInfoRespModel]" }
          }
        }
      }
    },
    "/api/MyLykkeSettings": {
      "get": {
        "tags": [ "MyLykkeSettings" ],
        "operationId": "GetMyLykkeSettings",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[MyLykkeSettingsModel]" }
          }
        }
      }
    },
    "/api/offchain/requests": {
      "get": {
        "tags": [ "Offchain" ],
        "operationId": "GetOffchainRequestsRequests",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainRequestResponsesModel]" }
          }
        }
      }
    },
    "/api/offchain/limit/cancel": {
      "post": {
        "tags": [ "Offchain" ],
        "operationId": "OffchainLimitCancel",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainLimitCancelModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/offchain/processchannel": {
      "post": {
        "tags": [ "Offchain" ],
        "operationId": "OffchainProcessChannel",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainChannelProcessModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainTradeRespModel]" }
          }
        }
      }
    },
    "/api/offchain/finalizetransfer": {
      "post": {
        "tags": [ "Offchain" ],
        "operationId": "OffchainFinalize",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainFinalizeModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainSuccessTradeRespModel]" }
          }
        }
      }
    },
    "/api/offchain/requestTransfer": {
      "post": {
        "tags": [ "Offchain" ],
        "operationId": "OffchainRequestTransfer",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainRequestTransferModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainTradeRespModel]" }
          }
        }
      }
    },
    "/api/offchain/channelkey": {
      "get": {
        "tags": [ "Offchain" ],
        "operationId": "GetOffchainChannelKey",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "asset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainEncryptedKeyRespModel]" }
          }
        }
      }
    },
    "/api/offchain/transferToMargin": {
      "post": {
        "tags": [ "Offchain" ],
        "operationId": "OffchainTransferToMargin",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainTransferToMarginModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainTradeRespModel]" }
          }
        }
      }
    },
    "/api/offchain/{operationId}/transferToTrusted": {
      "post": {
        "tags": [ "Offchain" ],
        "operationId": "OffchainTransferToTrustedWallet",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainTransferToTrustedWalletModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainTradeRespModel]" }
          }
        }
      }
    },
    "/api/offchain/cashout": {
      "post": {
        "tags": [ "OffchainCashout" ],
        "operationId": "OffchainCashout",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainCashoutModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainTradeRespModel]" }
          }
        }
      }
    },
    "/api/offchain/cashout/swift/fee/{assetId}/{countryCode}": {
      "get": {
        "tags": [ "OffchainCashout" ],
        "operationId": "OffchainCashoutSwiftFee",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[CashoutSwiftFeeResponse]" }
          }
        }
      }
    },
    "/api/offchain/cashout/swift": {
      "get": {
        "tags": [ "OffchainCashout" ],
        "operationId": "OffchainGetCashoutSwiftLastData",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[CashoutSwiftLastDataResponse]" }
          }
        }
      },
      "post": {
        "tags": [ "OffchainCashout" ],
        "operationId": "OffchainCashoutSwift",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainCashoutSwiftModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainTradeRespModel]" }
          }
        }
      }
    },
    "/api/offchain/cashout/forward": {
      "post": {
        "tags": [ "OffchainCashout" ],
        "operationId": "OffchainCashoutForward",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OffchainCashoutForwardModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OffchainTradeRespModel]" }
          }
        }
      }
    },
    "/api/Operations/unsignedTransactions": {
      "get": {
        "tags": [ "Operations" ],
        "operationId": "GetOperationsUnsignedTransactions",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiTransaction[]]" }
          }
        }
      },
      "post": {
        "tags": [ "Operations" ],
        "operationId": "OperationsUnsignedTransactionsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostSignedTransactionsModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Operations/list/{status}": {
      "get": {
        "tags": [ "Operations" ],
        "operationId": "OperationsListStatus",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "Created", "Accepted", "Confirmed", "Completed", "Canceled", "Failed", "Corrupted" ],
            "x-ms-enum": {
              "name": "OperationStatus",
              "modelAsString": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OperationCollectionModel]" }
          }
        }
      }
    },
    "/api/Operations/{id}": {
      "get": {
        "tags": [ "Operations" ],
        "operationId": "GetOperationsById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OperationModel]" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel[OperationModel]" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ResponseModel[OperationModel]" }
          }
        }
      }
    },
    "/api/Operations/{id}/cancel": {
      "post": {
        "tags": [ "Operations" ],
        "operationId": "OperationsCancelById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Operations/cancel": {
      "post": {
        "tags": [ "Operations" ],
        "operationId": "OperationsCancelAllOperations",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/OrderBook/{id}": {
      "get": {
        "tags": [ "OrderBook" ],
        "operationId": "GetOrderBookById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiOrderBook]" }
          }
        }
      }
    },
    "/api/PersonalData": {
      "get": {
        "tags": [ "PersonalData" ],
        "operationId": "GetPersonalData",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiPersonalDataModel]" }
          }
        }
      }
    },
    "/api/PinSecurity": {
      "get": {
        "tags": [ "PinSecurity" ],
        "description": "Use new method PostCheckPinCodeAsync",
        "operationId": "GetPinSecurity",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "pin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PinSecurityCheckResultModel]" }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [ "PinSecurity" ],
        "operationId": "PinSecurityPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PinSecurityChangeModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/PinSecurity/checkPinCode": {
      "post": {
        "tags": [ "PinSecurity" ],
        "operationId": "PinSecurityCheckPinCodePost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PinSecurityCheckRequestModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PinSecurityCheckResultModel]" }
          }
        }
      }
    },
    "/api/PrivateKeyOwnershipMsg": {
      "post": {
        "tags": [ "PrivateKeyOwnershipMsgConfirm" ],
        "operationId": "PrivateKeyOwnershipMsgPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OwnershipConfirmedModelRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OwnershipConfirmedModel]" }
          }
        }
      }
    },
    "/api/PrivateKeyOwnershipMsg/privateKeyOwnershipMsg": {
      "post": {
        "tags": [ "PrivateKeyOwnershipMsg" ],
        "operationId": "PrivateKeyOwnershipMsgRequest",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/OwnershipMsgRequestModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[OwnershipMsgModel]" }
          }
        }
      }
    },
    "/api/PrivateWallet": {
      "get": {
        "tags": [ "PrivateWallet" ],
        "operationId": "PrivateWalletGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetPrivateWalletsModel]" }
          }
        }
      },
      "put": {
        "tags": [ "PrivateWallet" ],
        "operationId": "PrivateWalletUpdate",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "editModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/EditPrivateWalletModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      },
      "post": {
        "tags": [ "PrivateWallet" ],
        "operationId": "PrivateWalletPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "createWalletModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreatePrivateWalletModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      },
      "delete": {
        "tags": [ "PrivateWallet" ],
        "operationId": "PrivateWalletDelete",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/PrivateWallet/{id}": {
      "get": {
        "tags": [ "PrivateWallet" ],
        "operationId": "PrivateWalletGetById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiPrivateWallet]" }
          }
        }
      }
    },
    "/api/PrivateWallet/key": {
      "post": {
        "tags": [ "PrivateWallet" ],
        "operationId": "PrivateWalletSetKey",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/SetKeyModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/PrivateWalletBackup": {
      "post": {
        "tags": [ "PrivateWalletBackup" ],
        "operationId": "PrivateWalletBackupPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "backupModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PrivateWalletBackupModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/PrivateWalletBalance": {
      "get": {
        "tags": [ "PrivateWalletBalance" ],
        "operationId": "PrivateWalletBalanceGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetPrivateWalletBalancesModel]" }
          }
        }
      }
    },
    "/api/PrivateWalletHistory": {
      "get": {
        "tags": [ "PrivateWalletHistory" ],
        "operationId": "PrivateWalletHistoryGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "assetId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PrivateWalletHistoryRecord[]]" }
          }
        }
      }
    },
    "/api/kyc/Profile/type/{profileType}": {
      "get": {
        "tags": [ "Profile" ],
        "operationId": "KycProfileGetProfileByType",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "profileType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": { "$ref": "#/definitions/ProfileModel" }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/kyc/Profile/type/{profileType}/documents": {
      "get": {
        "tags": [ "Profile" ],
        "operationId": "KycProfileGetDocumentsByProfileType",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "profileType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": { "$ref": "#/definitions/DocumentModel" }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/kyc/Profile/type/{profileType}/submit": {
      "post": {
        "tags": [ "Profile" ],
        "operationId": "KycProfileSubmitByProfileType",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "profileType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [ "Advanced", "ProIndividual" ],
            "x-ms-enum": {
              "name": "AccountTierModel",
              "modelAsString": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SubmitResultModel" }
          }
        },
        "deprecated": true
      }
    },
    "/api/PubkeyAddressValidation": {
      "get": {
        "tags": [ "PubkeyAddressValidation" ],
        "operationId": "PubkeyAddressValidationGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "pubkeyAddress",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PubkeyAddressValidationRespModel]" }
          }
        }
      }
    },
    "/api/PurchaseAsset": {
      "post": {
        "tags": [ "PurchaseAsset" ],
        "operationId": "PurchaseAssetPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PurchaseAssetsModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PurchaseAssetRespModel]" }
          }
        }
      }
    },
    "/api/PushSettings": {
      "get": {
        "tags": [ "PushSettings" ],
        "operationId": "PushSettingsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[PushNotificationsSettingsModel]" }
          }
        }
      },
      "post": {
        "tags": [ "PushSettings" ],
        "operationId": "PushSettingsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PushNotificationsSettingsModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/RecoverySmsConfirmation": {
      "post": {
        "tags": [ "RecoverySmsConfirmation" ],
        "operationId": "RecoverySmsConfirmationPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostRecoverySmsConfirmationModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[RecoverySmsConfirmationResponseModel]" }
          }
        }
      }
    },
    "/api/RefundAddress": {
      "get": {
        "tags": [ "RefundAddress" ],
        "operationId": "RefundAddressGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetRefundAddressResponseModel]" }
          }
        }
      },
      "post": {
        "tags": [ "RefundAddress" ],
        "operationId": "RefundAddressPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "refundAddressModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostRefundAddressModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/RefundSettings": {
      "get": {
        "tags": [ "RefundSettings" ],
        "operationId": "RefundSettingsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[RefundSettingsModel]" }
          }
        }
      },
      "post": {
        "tags": [ "RefundSettings" ],
        "operationId": "RefundSettingsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "refundAddressModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/RefundSettingsModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Registration": {
      "get": {
        "tags": [ "Registration" ],
        "operationId": "RegistrationGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetRegistrationStatusResponseModel]" }
          }
        }
      },
      "post": {
        "tags": [ "Registration" ],
        "operationId": "RegistrationPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AccountRegistrationModel" }
          },
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[AccountsRegistrationResponseModel]" }
          }
        }
      }
    },
    "/api/Registration/checkAffiliateCode": {
      "get": {
        "tags": [ "Registration" ],
        "operationId": "RegistrationCheckAffiliateCode",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[Boolean]" }
          }
        }
      }
    },
    "/api/RemindPasswordEmail": {
      "post": {
        "tags": [ "RemindPasswordEmail" ],
        "operationId": "RemindPasswordEmailPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "reqModel",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/RemindPasswordEmailModel" }
          },
          {
            "name": "region",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/RequestVoiceCall": {
      "post": {
        "tags": [ "RequestVoiceCall" ],
        "operationId": "RequestVoiceCallPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/RequestVoiceCallModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/resources/images/{imageName}": {
      "get": {
        "tags": [ "Resources" ],
        "operationId": "ResourcesGetImageResource",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "imageName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[String]" }
          }
        }
      }
    },
    "/api/resources/strings/{stringName}": {
      "get": {
        "tags": [ "Resources" ],
        "operationId": "ResourcesGetTextResource",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "stringName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "en"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[TextResource]" }
          }
        }
      }
    },
    "/api/resources/sections/{sectionName}": {
      "get": {
        "tags": [ "Resources" ],
        "operationId": "ResourcesGetTextResourcesBySection",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "sectionName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "en"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[TextResource]]" }
          }
        }
      }
    },
    "/api/resources/group/{groupName}": {
      "get": {
        "tags": [ "Resources" ],
        "operationId": "ResourcesGetGroupResource",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GroupResource]" }
          }
        }
      }
    },
    "/api/resources/group/{groupName}/section": {
      "get": {
        "tags": [ "Resources" ],
        "operationId": "ResourcesGetGroupResourcesSection",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[GroupResource]]" }
          }
        }
      }
    },
    "/api/RestrictedCountries": {
      "get": {
        "tags": [ "RestrictedCountries" ],
        "operationId": "RestrictedCountriesGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[RestrictedCountriesResponseModel]" }
          }
        }
      }
    },
    "/api/SendBlockchainEmail": {
      "post": {
        "tags": [ "SendBlockchainEmail" ],
        "operationId": "SendBlockchainEmailPost",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[SendWalletByEmailRespModel]" }
          }
        },
        "deprecated": true
      }
    },
    "/api/ServerTime": {
      "get": {
        "tags": [ "ServerTime" ],
        "operationId": "ServerTimeGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "type": "string" }
          }
        }
      }
    },
    "/api/SettingSignOrder": {
      "post": {
        "tags": [ "SettingSignOrder" ],
        "operationId": "SettingSignOrderPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/SetSignOrderSettingsModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[SetSignOrderSettingsModel]" }
          }
        }
      }
    },
    "/api/signatureVerificationToken/KeyConfirmation": {
      "get": {
        "tags": [ "SignatureVerificationToken" ],
        "operationId": "SignatureVerificationTokenKeyConfirmationGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "partnerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[RecoveryTokenChallange]" }
          }
        }
      },
      "post": {
        "tags": [ "SignatureVerificationToken" ],
        "operationId": "SignatureVerificationTokenKeyConfirmationPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "response",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/RecoveryTokenChallangeResponse" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[RecoveryToken]" }
          }
        }
      }
    },
    "/api/SignRequest": {
      "get": {
        "tags": [ "SignRequest" ],
        "operationId": "SignRequestGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      },
      "post": {
        "tags": [ "SignRequest" ],
        "operationId": "SignRequestPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/SignedRequestModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/SwiftCredentials/{assetId}": {
      "get": {
        "tags": [ "SwiftCredentials" ],
        "operationId": "SwiftCredentialsGetByAssetId",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetSwiftCredentialsModel]" }
          }
        }
      }
    },
    "/api/TermsOfUse": {
      "get": {
        "tags": [ "TermsOfUse" ],
        "operationId": "TermsOfUseGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[TermsOfUseСonsentModel]" }
          }
        }
      },
      "post": {
        "tags": [ "TermsOfUse" ],
        "operationId": "TermsOfUsePost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PutTermsOfUseСonsentModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Tiers/info": {
      "get": {
        "tags": [ "Tiers" ],
        "operationId": "TiersGetInfo",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[TierInfoResponse]" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel[TierInfoResponse]" }
          }
        }
      }
    },
    "/api/Tiers/questionnaire": {
      "get": {
        "tags": [ "Tiers" ],
        "operationId": "TiersGetQuestionnaire",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[QuestionnaireResponse]" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel[QuestionnaireResponse]" }
          }
        }
      },
      "post": {
        "tags": [ "Tiers" ],
        "operationId": "TiersSaveQuestionnaire",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AnswersRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/TrustedWallets/{operationId}/transfer": {
      "post": {
        "tags": [ "TrustedWallets" ],
        "operationId": "TrustedWalletsOperationTransfer",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/Utils/isUSorCanadaNumber/{phoneNumber}": {
      "get": {
        "tags": [ "Utils" ],
        "operationId": "IsUSorCanadaNumberGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IsUsOrCanadaNumberResponse]" }
          }
        }
      }
    },
    "/home/Version": {
      "get": {
        "tags": [ "Version" ],
        "operationId": "VersionGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/VersionModel" }
          }
        }
      }
    },
    "/api/WalletMigration": {
      "post": {
        "tags": [ "WalletMigration" ],
        "operationId": "WalletMigrationPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PostWalletMigrationModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    },
    "/api/Wallets": {
      "get": {
        "tags": [ "Wallets" ],
        "operationId": "WalletsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[GetWaletsRespModel]" }
          }
        }
      },
      "post": {
        "tags": [ "Wallets" ],
        "operationId": "WalletsGenerateWallet",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/SubmitKeysModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[DepositAddressModel]" }
          }
        }
      }
    },
    "/api/Wallets/{id}": {
      "get": {
        "tags": [ "Wallets" ],
        "operationId": "WalletsGetById",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[ApiWalletAssetModel]" }
          }
        }
      }
    },
    "/api/Wallets/depositaddress/{assetId}": {
      "post": {
        "tags": [ "Wallets" ],
        "description": "",
        "operationId": "WalletsGetOrGenerateDepositAddress",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[DepositAddressModel]" }
          }
        },
        "deprecated": true
      }
    },
    "/api/WatchLists": {
      "get": {
        "tags": [ "WatchLists" ],
        "operationId": "WatchListsGetList",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[IEnumerable[WatchList]]" }
          }
        }
      },
      "post": {
        "tags": [ "WatchLists" ],
        "operationId": "WatchListsCreate",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CustomWatchListCreateModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[WatchList]" }
          }
        }
      }
    },
    "/api/WatchLists/{id}": {
      "get": {
        "tags": [ "WatchLists" ],
        "operationId": "WatchListsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[WatchList]" }
          }
        }
      },
      "put": {
        "tags": [ "WatchLists" ],
        "operationId": "WatchListsUpdate",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CustomWatchListUpdateModel" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel[WatchList]" }
          }
        }
      },
      "delete": {
        "tags": [ "WatchLists" ],
        "operationId": "WatchListsDelete",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Old Lykke access token. *It's not required for request, you can use embed 'Authorization' option to use a new one under the hood.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResponseModel" }
          }
        }
      }
    }
  },
  "definitions": {
    "ResponseModel[AssetDescriptionModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AssetDescriptionModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AssetDescriptionModel": {
      "required": [ "PopIndex" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "AssetClass": { "type": "string" },
        "PopIndex": {
          "format": "int32",
          "type": "integer"
        },
        "Description": { "type": "string" },
        "IssuerName": { "type": "string" },
        "NumberOfCoins": { "type": "string" },
        "MarketCapitalization": { "type": "string" },
        "AssetDescriptionUrl": { "type": "string" },
        "FullName": { "type": "string" }
      }
    },
    "ErrorModel": {
      "required": [ "Code" ],
      "type": "object",
      "properties": {
        "Code": {
          "enum": [ "InvalidInputField", "InconsistentData", "NotAuthenticated", "InvalidUsernameOrPassword", "AssetNotFound", "NotEnoughFunds", "VersionNotSupported", "RuntimeProblem", "WrongConfirmationCode", "BackupWarning", "BackupRequired", "MaintananceMode", "NoData", "ShouldOpenNewChannel", "ShouldProvideNewTempPubKey", "ShouldProcesOffchainRequest", "NoOffchainLiquidity", "GeneralError", "AddressShouldBeGenerated", "ExpiredAccessToken", "BadAccessToken", "NoEncodedMainKey", "PreviousTransactionsWereNotCompleted", "LimitationCheckFailed", "TransactionAlreadyExists", "UnknownTrustedTransferDirection", "InvalidGuidValue", "BadTempAccessToken", "NotEnoughLiquidity", "InvalidCashoutAddress", "MinVolumeViolation", "PendingDisclaimer", "AmountIsLessThanLimit", "AmountIsBiggerThanLimit", "AmountIsBiggerThanLimitAndUpgrade", "DepositWalletDuplication", "BadRequest", "NotEnoughGas" ],
          "type": "string",
          "x-ms-enum": {
            "name": "ErrorCodeType",
            "modelAsString": false
          }
        },
        "Field": { "type": "string" },
        "Message": { "type": "string" },
        "Details": { "type": "object" }
      }
    },
    "ResponseModel[GetAllAssetPairsRatesModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetAllAssetPairsRatesModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetAllAssetPairsRatesModel": {
      "type": "object",
      "properties": {
        "Rates": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiAssetPairRateBaseModel" }
        }
      }
    },
    "ApiAssetPairRateBaseModel": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Bid": {
          "format": "double",
          "type": "number"
        },
        "Ask": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[GetSingleAssetPairRateModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetSingleAssetPairRateModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetSingleAssetPairRateModel": {
      "type": "object",
      "properties": { "Rate": { "$ref": "#/definitions/ApiAssetPairRateBaseModel" } }
    },
    "ResponseModel[GetAssetPairsResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetAssetPairsResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetAssetPairsResponseModel": {
      "type": "object",
      "properties": {
        "AssetPairs": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiAssetPairModel" }
        }
      }
    },
    "ApiAssetPairModel": {
      "required": [ "Accuracy", "InvertedAccuracy", "Inverted", "MinVolume", "MinInvertedVolume" ],
      "type": "object",
      "properties": {
        "Group": { "type": "string" },
        "Id": { "type": "string" },
        "Name": { "type": "string" },
        "Accuracy": {
          "format": "int32",
          "type": "integer"
        },
        "InvertedAccuracy": {
          "format": "int32",
          "type": "integer"
        },
        "BaseAssetId": { "type": "string" },
        "QuotingAssetId": { "type": "string" },
        "Inverted": { "type": "boolean" },
        "MinVolume": {
          "format": "double",
          "type": "number"
        },
        "MinInvertedVolume": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[GetAssetPairResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetAssetPairResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetAssetPairResponseModel": {
      "type": "object",
      "properties": { "AssetPair": { "$ref": "#/definitions/ApiAssetPairModel" } }
    },
    "ResponseModel[ApplicationInfoResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApplicationInfoResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ApplicationInfoResponseModel": {
      "required": [ "CountryPhoneCodesLastModified" ],
      "type": "object",
      "properties": {
        "AppVersion": { "type": "string" },
        "CountryPhoneCodesLastModified": {
          "format": "date-time",
          "type": "string"
        },
        "TermsOfUseLink": { "type": "string" },
        "InformationBrochureLink": { "type": "string" },
        "RefundInfoLink": { "type": "string" },
        "SupportPhoneNum": { "type": "string" },
        "UserAgreementUrl": { "type": "string" },
        "MarginSettings": { "$ref": "#/definitions/MarginSettings" }
      }
    },
    "MarginSettings": {
      "type": "object",
      "properties": {
        "ApiUrl": { "type": "string" },
        "WampHost": { "type": "string" }
      }
    },
    "ResponseModel[ApiAppSettingsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiAppSettingsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ApiAppSettingsModel": {
      "required": [ "RateRefreshPeriod", "SignOrder", "DebugMode", "MarketOrderPriceDeviation" ],
      "type": "object",
      "properties": {
        "RateRefreshPeriod": {
          "format": "int32",
          "type": "integer"
        },
        "BaseAsset": { "$ref": "#/definitions/ApiAssetModel" },
        "SignOrder": { "type": "boolean" },
        "DepositUrl": { "type": "string" },
        "DebugMode": { "type": "boolean" },
        "RefundSettings": { "$ref": "#/definitions/ApiRefundSettings" },
        "MarketOrderPriceDeviation": {
          "format": "double",
          "type": "number"
        },
        "FeeSettings": { "$ref": "#/definitions/ApiFeeSettings" }
      }
    },
    "ApiAssetModel": {
      "required": [ "Accuracy", "HideWithdraw", "HideDeposit", "KycNeeded", "BankCardsDepositEnabled", "SwiftDepositEnabled", "BlockchainDepositEnabled", "OtherDepositOptionsEnabled" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Name": { "type": "string" },
        "Accuracy": {
          "format": "int32",
          "type": "integer"
        },
        "Symbol": { "type": "string" },
        "HideWithdraw": { "type": "boolean" },
        "HideDeposit": { "type": "boolean" },
        "KycNeeded": { "type": "boolean" },
        "BankCardsDepositEnabled": { "type": "boolean" },
        "SwiftDepositEnabled": { "type": "boolean" },
        "BlockchainDepositEnabled": { "type": "boolean" },
        "OtherDepositOptionsEnabled": { "type": "boolean" },
        "CategoryId": { "type": "string" }
      }
    },
    "ApiRefundSettings": {
      "type": "object",
      "properties": { "Address": { "type": "string" } }
    },
    "ApiFeeSettings": {
      "required": [ "BankCardsFeeSizePercentage" ],
      "type": "object",
      "properties": {
        "BankCardsFeeSizePercentage": {
          "format": "double",
          "type": "number"
        },
        "CashOut": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/CashOutFee" }
        }
      }
    },
    "CashOutFee": {
      "required": [ "Size" ],
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "Size": {
          "format": "double",
          "type": "number"
        },
        "Type": { "type": "string" }
      }
    },
    "ResponseModel[GetAssetCategoriesResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetAssetCategoriesResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetAssetCategoriesResponseModel": {
      "type": "object",
      "properties": {
        "AssetCategories": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiAssetCategoryModel" }
        }
      }
    },
    "ApiAssetCategoryModel": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Name": { "type": "string" },
        "IosIconUrl": { "type": "string" },
        "AndroidIconUrl": { "type": "string" }
      }
    },
    "ResponseModel[AssetDisclaimerResponceModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AssetDisclaimerResponceModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AssetDisclaimerResponceModel": {
      "type": "object",
      "properties": {
        "Disclaimers": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/AssetDisclaimerModel" }
        }
      }
    },
    "AssetDisclaimerModel": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Text": { "type": "string" }
      }
    },
    "ResponseModel": {
      "type": "object",
      "properties": { "Error": { "$ref": "#/definitions/ErrorModel" } }
    },
    "ResponseModel[GetAssetPairDetailedRateModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetAssetPairDetailedRateModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetAssetPairDetailedRateModel": {
      "required": [ "FixingTime", "LastPrice", "StartTime", "EndTime" ],
      "type": "object",
      "properties": {
        "FixingTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastPrice": {
          "format": "double",
          "type": "number"
        },
        "Rate": { "$ref": "#/definitions/AssetPairDetailedRateModel" },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AssetPairDetailedRateModel": {
      "required": [ "PChange", "Inverted" ],
      "type": "object",
      "properties": {
        "PChange": {
          "format": "double",
          "type": "number"
        },
        "PChangeBid": {
          "format": "double",
          "type": "number"
        },
        "ChngGrph": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "AskBidGraph": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/AskBid" }
        },
        "Inverted": { "type": "boolean" }
      }
    },
    "AskBid": {
      "required": [ "A", "B" ],
      "type": "object",
      "properties": {
        "A": {
          "format": "double",
          "type": "number"
        },
        "B": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[GetAssetPairsRatesModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetAssetPairsRatesModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetAssetPairsRatesModel": {
      "type": "object",
      "properties": {
        "Rates": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiAssetPairRateModel" }
        }
      }
    },
    "ApiAssetPairRateModel": {
      "required": [ "PChng", "Inverted" ],
      "type": "object",
      "properties": {
        "PChng": {
          "format": "double",
          "type": "number"
        },
        "ChngGrph": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "Inverted": { "type": "boolean" },
        "Id": { "type": "string" },
        "Bid": {
          "format": "double",
          "type": "number"
        },
        "Ask": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[GetAssetPairRateModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetAssetPairRateModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetAssetPairRateModel": {
      "type": "object",
      "properties": { "Rate": { "$ref": "#/definitions/ApiAssetPairRateModel" } }
    },
    "ResponseModel[GetBaseAssetsRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetBaseAssetsRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetBaseAssetsRespModel": {
      "type": "object",
      "properties": {
        "Assets": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiAssetModel" }
        }
      }
    },
    "ResponseModel[GetClientBaseAssetRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetClientBaseAssetRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetClientBaseAssetRespModel": {
      "type": "object",
      "properties": { "Asset": { "$ref": "#/definitions/ApiAssetModel" } }
    },
    "GetAssetDescriptionsListModel": {
      "type": "object",
      "properties": {
        "Ids": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "ResponseModel[AssetDescriptionsListModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AssetDescriptionsListModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AssetDescriptionsListModel": {
      "type": "object",
      "properties": {
        "Descriptions": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/AssetDescriptionModel" }
        }
      }
    },
    "ResponseModel[AssetAttributesModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AssetAttributesModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AssetAttributesModel": {
      "type": "object",
      "properties": {
        "Pairs": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/AssetAttribute" }
        }
      }
    },
    "AssetAttribute": {
      "type": "object",
      "properties": {
        "Key": { "type": "string" },
        "Value": { "type": "string" }
      }
    },
    "ResponseModel[AssetAttribute]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AssetAttribute" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AuthenticateModel": {
      "required": [ "Email", "Password", "PartnerId" ],
      "type": "object",
      "properties": {
        "Email": { "type": "string" },
        "Password": { "type": "string" },
        "ClientInfo": { "type": "string" },
        "PartnerId": { "type": "string" }
      }
    },
    "ResponseModel[AuthenticateResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AuthenticateResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AuthenticateResponseModel": {
      "required": [ "KycStatus", "PinIsEntered", "CanCashInViaBankCard", "SwiftDepositEnabled", "IsUserFromUSA" ],
      "type": "object",
      "properties": {
        "KycStatus": {
          "enum": [ "NeedToFillData", "Pending", "Ok", "Rejected", "RestrictedArea" ],
          "type": "string",
          "x-ms-enum": {
            "name": "ApiKycStatus",
            "modelAsString": false
          }
        },
        "PinIsEntered": { "type": "boolean" },
        "Token": { "type": "string" },
        "NotificationsId": { "type": "string" },
        "PersonalData": { "$ref": "#/definitions/ApiPersonalDataModel" },
        "CanCashInViaBankCard": { "type": "boolean" },
        "SwiftDepositEnabled": { "type": "boolean" },
        "IsUserFromUSA": { "type": "boolean" }
      }
    },
    "ApiPersonalDataModel": {
      "type": "object",
      "properties": {
        "FullName": { "type": "string" },
        "FirstName": { "type": "string" },
        "LastName": { "type": "string" },
        "Email": { "type": "string" },
        "Phone": { "type": "string" },
        "Country": { "type": "string" },
        "Address": { "type": "string" },
        "City": { "type": "string" },
        "Zip": { "type": "string" }
      }
    },
    "LogoutModel": {
      "type": "object",
      "properties": { "InstallationId": { "type": "string" } }
    },
    "BankCardPaymentUrlInputModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "AssetId": { "type": "string" },
        "WalletId": { "type": "string" },
        "FirstName": { "type": "string" },
        "LastName": { "type": "string" },
        "City": { "type": "string" },
        "Zip": { "type": "string" },
        "Address": { "type": "string" },
        "Country": { "type": "string" },
        "Email": { "type": "string" },
        "Phone": { "type": "string" },
        "DepositOption": { "type": "string" },
        "OkUrl": { "type": "string" },
        "FailUrl": { "type": "string" }
      }
    },
    "ResponseModel[BankCardPaymentUrlResponceModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BankCardPaymentUrlResponceModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "BankCardPaymentUrlResponceModel": {
      "type": "object",
      "properties": {
        "Url": { "type": "string" },
        "OkUrl": { "type": "string" },
        "FailUrl": { "type": "string" },
        "ReloadRegex": { "type": "string" },
        "UrlsToFormatRegex": { "type": "string" }
      }
    },
    "ResponseModel[BankCardPaymentUrlInputModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BankCardPaymentUrlInputModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "TransferReqModel": {
      "required": [ "BalanceChange" ],
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "BalanceChange": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "PostClientBaseCurrencyModel": {
      "type": "object",
      "properties": { "Id": { "type": "string" } }
    },
    "ResponseModel[BlockchainTransactionRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BlockchainTransactionRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "BlockchainTransactionRespModel": {
      "type": "object",
      "properties": { "Transaction": { "$ref": "#/definitions/ApiBlockchainTransaction" } }
    },
    "ApiBlockchainTransaction": {
      "required": [ "Confirmations", "Height" ],
      "type": "object",
      "properties": {
        "Hash": { "type": "string" },
        "Date": { "type": "string" },
        "Confirmations": {
          "format": "int32",
          "type": "integer"
        },
        "Block": { "type": "string" },
        "Height": {
          "format": "int32",
          "type": "integer"
        },
        "SenderId": { "type": "string" },
        "AssetId": { "type": "string" },
        "Quantity": { "type": "string" },
        "Url": { "type": "string" }
      }
    },
    "ResponseModel[BccMultisigTransactionResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BccMultisigTransactionResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "BccMultisigTransactionResponseModel": {
      "required": [ "ClientAmount", "HubAmount", "ClientFee" ],
      "type": "object",
      "properties": {
        "ClientAmount": {
          "format": "double",
          "type": "number"
        },
        "HubAmount": {
          "format": "double",
          "type": "number"
        },
        "ClientFee": {
          "format": "double",
          "type": "number"
        },
        "Transaction": { "type": "string" },
        "Inputs": { "type": "string" }
      }
    },
    "ResponseModel[BccTransactionResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BccTransactionResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "BccTransactionResponseModel": {
      "type": "object",
      "properties": {
        "Transaction": { "type": "string" },
        "Inputs": { "type": "string" }
      }
    },
    "ResponseModel[BccPrivateBalanceModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BccPrivateBalanceModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "BccPrivateBalanceModel": {
      "required": [ "Balance", "Fee" ],
      "type": "object",
      "properties": {
        "Balance": {
          "format": "double",
          "type": "number"
        },
        "Fee": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "BccBroadcastRequest": {
      "type": "object",
      "properties": { "Transaction": { "type": "string" } }
    },
    "ResponseModel[BccBroadcastResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BccBroadcastResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "BccBroadcastResponseModel": {
      "type": "object",
      "properties": { "TransactionHash": { "type": "string" } }
    },
    "ApiTransaction": {
      "required": [ "Fee" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Hex": { "type": "string" },
        "Fee": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "PostChangePinAndPasswordModel": {
      "type": "object",
      "properties": {
        "PartnerId": { "type": "string" },
        "Email": { "type": "string" },
        "SignedOwnershipMsg": { "type": "string" },
        "SmsCode": { "type": "string" },
        "NewPin": { "type": "string" },
        "NewPassword": { "type": "string" },
        "NewHint": { "type": "string" },
        "EncodedPrivateKey": { "type": "string" }
      }
    },
    "ResponseModel[CheckDocumentsToUploadModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/CheckDocumentsToUploadModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "CheckDocumentsToUploadModel": {
      "required": [ "IdCard", "ProofOfAddress", "Selfie" ],
      "type": "object",
      "properties": {
        "IdCard": { "type": "boolean" },
        "ProofOfAddress": { "type": "boolean" },
        "Selfie": { "type": "boolean" }
      }
    },
    "ResponseModel[CheckMobilePhoneResultModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/CheckMobilePhoneResultModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "CheckMobilePhoneResultModel": {
      "required": [ "Passed" ],
      "type": "object",
      "properties": { "Passed": { "type": "boolean" } }
    },
    "PostClientPhoneModel": {
      "type": "object",
      "properties": { "PhoneNumber": { "type": "string" } }
    },
    "CheckMobilePhoneRequestModel": {
      "type": "object",
      "properties": {
        "PhoneNumber": { "type": "string" },
        "Code": { "type": "string" }
      }
    },
    "SubmitCodeModel": {
      "type": "object",
      "properties": { "Code": { "type": "string" } }
    },
    "ResponseModel[AccessTokenModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AccessTokenModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AccessTokenModel": {
      "type": "object",
      "properties": { "AccessToken": { "type": "string" } }
    },
    "ResponseModel[EncodedKeyModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EncodedKeyModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EncodedKeyModel": {
      "type": "object",
      "properties": { "EncodedPrivateKey": { "type": "string" } }
    },
    "ResponseModel[ClientBalancesModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ClientBalancesModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ClientBalancesModel": {
      "required": [ "TradingWallet", "PrivateWallets", "MarginWallets" ],
      "type": "object",
      "properties": {
        "TradingWallet": {
          "format": "double",
          "type": "number"
        },
        "PrivateWallets": {
          "format": "double",
          "type": "number"
        },
        "MarginWallets": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[IKeyValue]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/IKeyValue" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "IKeyValue": {
      "type": "object",
      "properties": {
        "Key": { "type": "string" },
        "Value": { "type": "string" }
      }
    },
    "KeyValue": {
      "type": "object",
      "properties": {
        "Key": { "type": "string" },
        "Value": { "type": "string" }
      }
    },
    "ResponseModel[IsUserFromUSModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/IsUserFromUSModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "IsUserFromUSModel": {
      "required": [ "IsUserFromUS" ],
      "type": "object",
      "properties": { "IsUserFromUS": { "type": "boolean" } }
    },
    "SetIsUserFromUSModel": {
      "type": "object",
      "properties": { "IsUserFromUS": { "type": "boolean" } }
    },
    "ResponseModel[PendingActionsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/PendingActionsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PendingActionsModel": {
      "required": [ "UnsignedTxs", "OffchainRequests", "NeedReinit", "DialogPending", "PendingOperations", "EthereumPendingActions", "SessionConfirmation" ],
      "type": "object",
      "properties": {
        "UnsignedTxs": { "type": "boolean" },
        "OffchainRequests": { "type": "boolean" },
        "NeedReinit": { "type": "boolean" },
        "DialogPending": { "type": "boolean" },
        "PendingOperations": { "type": "boolean" },
        "EthereumPendingActions": { "type": "boolean" },
        "SessionConfirmation": { "type": "boolean" }
      }
    },
    "PostClientCountryModel": {
      "type": "object",
      "properties": { "Country": { "type": "string" } }
    },
    "PostClientFirstNameLastNameModel": {
      "type": "object",
      "properties": {
        "FirstName": { "type": "string" },
        "LastName": { "type": "string" }
      }
    },
    "PostClientFullNameModel": {
      "type": "object",
      "properties": { "FullName": { "type": "string" } }
    },
    "ClientKeysModel": {
      "type": "object",
      "properties": {
        "PubKey": { "type": "string" },
        "EncodedPrivateKey": { "type": "string" }
      }
    },
    "WriteClientLogModel": {
      "type": "object",
      "properties": { "Data": { "type": "string" } }
    },
    "ResponseModel[ClientStateModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ClientStateModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ClientStateModel": {
      "required": [ "KycStatus", "MarginTrading", "IsOffchain", "MarginTradingLive", "MarginTermsOfUseAgreed", "HasBackup" ],
      "type": "object",
      "properties": {
        "IsPwdHashed": { "type": "boolean" },
        "KycStatus": {
          "enum": [ "NeedToFillData", "Pending", "Ok", "Rejected", "RestrictedArea" ],
          "type": "string",
          "x-ms-enum": {
            "name": "ApiKycStatus",
            "modelAsString": false
          }
        },
        "CanCashInViaBankCard": { "type": "boolean" },
        "SwiftDepositEnabled": { "type": "boolean" },
        "MarginTrading": { "type": "boolean" },
        "IsOffchain": { "type": "boolean" },
        "MarginTradingLive": { "type": "boolean" },
        "MarginTermsOfUseAgreed": { "type": "boolean" },
        "HasBackup": { "type": "boolean" },
        "ICO": { "$ref": "#/definitions/IcoSettings" }
      }
    },
    "IcoSettings": {
      "required": [ "IsEnabled", "ShowBanner" ],
      "type": "object",
      "properties": {
        "IsEnabled": { "type": "boolean" },
        "ShowBanner": { "type": "boolean" }
      }
    },
    "ResponseModel[TermsOfUseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/TermsOfUseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "TermsOfUseModel": {
      "type": "object",
      "properties": {
        "SpotTermsOfUseLink": { "type": "string" },
        "MarginTermsOfUseLink": { "type": "string" },
        "MarginRiskDescriptionLink": { "type": "string" }
      }
    },
    "ResponseModel[CountriesResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/CountriesResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "CountriesResponseModel": {
      "type": "object",
      "properties": {
        "Current": { "type": "string" },
        "CountriesList": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/CountryItem" }
        }
      }
    },
    "CountryItem": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Iso2": { "type": "string" },
        "Name": { "type": "string" },
        "Prefix": { "type": "string" }
      }
    },
    "AddD3UserRequest": {
      "type": "object",
      "properties": {
        "IrohaUsername": { "type": "string" },
        "PublicKey": { "type": "string" }
      }
    },
    "ResponseModel[ClientDialogsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ClientDialogsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ClientDialogsModel": {
      "type": "object",
      "properties": {
        "Dialogs": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ClientDialog" }
        }
      }
    },
    "ClientDialog": {
      "required": [ "Id", "Type" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string"
        },
        "Type": {
          "enum": [ "Info", "Warning", "Question" ],
          "type": "string",
          "x-ms-enum": {
            "name": "DialogType",
            "modelAsString": false
          }
        },
        "Caption": { "type": "string" },
        "Text": { "type": "string" },
        "Buttons": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ClientDialogButtonModel" }
        }
      }
    },
    "ClientDialogButtonModel": {
      "required": [ "Id", "PinRequired" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string"
        },
        "PinRequired": { "type": "boolean" },
        "Text": { "type": "string" }
      }
    },
    "ClientDialogSubmitModel": {
      "required": [ "Id", "ButtonId" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string"
        },
        "ButtonId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "ResponseModel[IKeyValue[]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/IKeyValue" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[ObsoletteDictsRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ObsoletteDictsRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ObsoletteDictsRespModel": {
      "type": "object",
      "properties": {
        "Assets": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ObsoleteApiDictAsset" }
        }
      }
    },
    "ObsoleteApiDictAsset": {
      "required": [ "Accuracy" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Name": { "type": "string" },
        "Accuracy": {
          "format": "int32",
          "type": "integer"
        },
        "IssuerId": { "type": "string" }
      }
    },
    "ResponseModel[AssetDictRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AssetDictRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AssetDictRespModel": {
      "type": "object",
      "properties": {
        "Assets": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiDictAsset" }
        }
      }
    },
    "ApiDictAsset": {
      "required": [ "Accuracy", "HideWithdraw", "HideDeposit", "DefaultOrder", "KycNeeded", "VisaDeposit", "SwiftDeposit", "BlockchainDeposit", "OtherDeposit", "BuyScreen", "SellScreen", "BlockchainWithdrawal", "SwiftWithdrawal", "ForwardWithdrawal", "CrosschainWithdrawal", "ForwardFrozenDays", "Blockchain", "IsTrusted", "PrivateWalletsEnabled" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "BlockchainId": { "type": "string" },
        "Name": { "type": "string" },
        "Symbol": { "type": "string" },
        "IdIssuer": { "type": "string" },
        "Accuracy": {
          "format": "int32",
          "type": "integer"
        },
        "HideWithdraw": { "type": "boolean" },
        "HideDeposit": { "type": "boolean" },
        "DefaultOrder": {
          "format": "int32",
          "type": "integer"
        },
        "KycNeeded": { "type": "boolean" },
        "CategoryId": { "type": "string" },
        "VisaDeposit": { "type": "boolean" },
        "SwiftDeposit": { "type": "boolean" },
        "BlockchainDeposit": { "type": "boolean" },
        "OtherDeposit": { "type": "boolean" },
        "BuyScreen": { "type": "boolean" },
        "SellScreen": { "type": "boolean" },
        "BlockchainWithdrawal": { "type": "boolean" },
        "SwiftWithdrawal": { "type": "boolean" },
        "ForwardWithdrawal": { "type": "boolean" },
        "CrosschainWithdrawal": { "type": "boolean" },
        "BcnDepositAddress": { "type": "string" },
        "BcnDepositAddressExtension": { "$ref": "#/definitions/BcnAddressExtensionModel" },
        "ForwardBaseAsset": { "type": "string" },
        "ForwardFrozenDays": {
          "format": "int32",
          "type": "integer"
        },
        "ForwardMemoUrl": { "type": "string" },
        "AssetType": {
          "enum": [ "Erc20Token" ],
          "type": "string",
          "x-ms-enum": {
            "name": "AssetType",
            "modelAsString": false
          }
        },
        "IconUrl": { "type": "string" },
        "DisplayId": { "type": "string" },
        "Blockchain": {
          "enum": [ "None", "Bitcoin", "Ethereum" ],
          "type": "string",
          "x-ms-enum": {
            "name": "Blockchain",
            "modelAsString": false
          }
        },
        "Description": { "$ref": "#/definitions/AssetDescriptionModel" },
        "IsTrusted": { "type": "boolean" },
        "PrivateWalletsEnabled": { "type": "boolean" }
      }
    },
    "BcnAddressExtensionModel": {
      "required": [ "TypeForDeposit", "TypeForWithdrawal" ],
      "type": "object",
      "properties": {
        "AddressExtensionDisplayName": { "type": "string" },
        "BaseAddressDisplayName": { "type": "string" },
        "DepositAddressExtension": { "type": "string" },
        "TypeForDeposit": {
          "enum": [ "NotSupported", "Required" ],
          "type": "string",
          "x-ms-enum": {
            "name": "AddressExtensionTypeForDeposit",
            "modelAsString": false
          }
        },
        "TypeForWithdrawal": {
          "enum": [ "NotSupported", "Optional" ],
          "type": "string",
          "x-ms-enum": {
            "name": "AddressExtensionTypeForWithdrawal",
            "modelAsString": false
          }
        }
      }
    },
    "ResponseModel[DictionariesUpdatesRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/DictionariesUpdatesRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "DictionariesUpdatesRespModel": {
      "required": [ "AssetsUpd" ],
      "type": "object",
      "properties": {
        "AssetsUpd": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "FileStreamResult": {
      "required": [ "EnableRangeProcessing" ],
      "type": "object",
      "properties": {
        "FileStream": { "$ref": "#/definitions/Stream" },
        "ContentType": {
          "type": "string",
          "readOnly": true
        },
        "FileDownloadName": { "type": "string" },
        "LastModified": {
          "format": "date-time",
          "type": "string"
        },
        "EntityTag": { "$ref": "#/definitions/EntityTagHeaderValue" },
        "EnableRangeProcessing": { "type": "boolean" }
      }
    },
    "Stream": {
      "required": [ "Position", "ReadTimeout", "WriteTimeout" ],
      "type": "object",
      "properties": {
        "CanRead": {
          "type": "boolean",
          "readOnly": true
        },
        "CanSeek": {
          "type": "boolean",
          "readOnly": true
        },
        "CanTimeout": {
          "type": "boolean",
          "readOnly": true
        },
        "CanWrite": {
          "type": "boolean",
          "readOnly": true
        },
        "Length": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Position": {
          "format": "int64",
          "type": "integer"
        },
        "ReadTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "WriteTimeout": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "EntityTagHeaderValue": {
      "type": "object",
      "properties": {
        "Tag": {
          "$ref": "#/definitions/StringSegment",
          "readOnly": true
        },
        "IsWeak": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "StringSegment": {
      "type": "object",
      "properties": {
        "Buffer": {
          "type": "string",
          "readOnly": true
        },
        "Offset": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Length": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Value": {
          "type": "string",
          "readOnly": true
        },
        "HasValue": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "WalletAddressModel": {
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "WalletName": { "type": "string" }
      }
    },
    "PostEmailMeRequestModel": {
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "BcnAddress": { "type": "string" },
        "BcnAddressExtension": { "type": "string" }
      }
    },
    "ResponseModel[EmailVerificationModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EmailVerificationModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EmailVerificationModel": {
      "required": [ "Passed" ],
      "type": "object",
      "properties": { "Passed": { "type": "boolean" } }
    },
    "PostEmailModel": {
      "type": "object",
      "properties": {
        "Email": { "type": "string" },
        "PartnerId": { "type": "string" }
      }
    },
    "VerifyEmailRequestModel": {
      "type": "object",
      "properties": {
        "Email": { "type": "string" },
        "Code": { "type": "string" },
        "PartnerId": { "type": "string" },
        "Token": { "type": "string" }
      }
    },
    "EthereumTransferModel": {
      "type": "object",
      "properties": { "Sign": { "type": "string" } }
    },
    "ResponseModel[EthereumSuccessTradeRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthereumSuccessTradeRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthereumSuccessTradeRespModel": {
      "type": "object",
      "properties": { "Order": { "$ref": "#/definitions/ApiEthereumOrder" } }
    },
    "ApiEthereumOrder": {
      "required": [ "DateTime", "Volume", "Price", "TotalCost" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": {
          "format": "date-time",
          "type": "string"
        },
        "OrderType": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "Asset": { "type": "string" },
        "AssetPair": { "type": "string" },
        "TotalCost": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[EthereumEmptyTransactionModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthereumEmptyTransactionModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthereumEmptyTransactionModel": {
      "required": [ "Id" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string"
        },
        "Hash": { "type": "string" }
      }
    },
    "ResponseModel[EthereumEmptyTransactionModelContainer]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthereumEmptyTransactionModelContainer" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthereumEmptyTransactionModelContainer": {
      "type": "object",
      "properties": {
        "Transfers": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/EthereumEmptyTransactionModel" }
        }
      }
    },
    "EthereumTransactionModelContainer": {
      "type": "object",
      "properties": {
        "Transfers": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/EthereumTransactionModel" }
        }
      }
    },
    "EthereumTransactionModel": {
      "required": [ "Id" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string"
        },
        "Sign": { "type": "string" }
      }
    },
    "GenerateTransferTransactionForEthereumModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "GasPrice": { "type": "string" },
        "GasAmount": { "type": "string" },
        "SourceAddress": { "type": "string" },
        "DestinationAddress": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "AssetId": { "type": "string" }
      }
    },
    "ResponseModel[EthTransaction]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthTransaction" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthTransaction": {
      "type": "object",
      "properties": {
        "From": { "type": "string" },
        "Hex": { "type": "string" }
      }
    },
    "ResponseModel[TransactionHashModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/TransactionHashModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "TransactionHashModel": {
      "type": "object",
      "properties": { "TransactionHash": { "type": "string" } }
    },
    "ResponseModel[ExecutionEstimationResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ExecutionEstimationResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ExecutionEstimationResponse": {
      "required": [ "WouldFail" ],
      "type": "object",
      "properties": {
        "GasAmount": { "type": "string" },
        "WouldFail": { "type": "boolean" }
      }
    },
    "EstimateTransferTransactionForEthereumModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "GasPrice": { "type": "string" },
        "SourceAddress": { "type": "string" },
        "DestinationAddress": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "AssetId": { "type": "string" }
      }
    },
    "ResponseModel[ExecutionEstimationV2Response]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ExecutionEstimationV2Response" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ExecutionEstimationV2Response": {
      "required": [ "EthAmount", "WouldFail" ],
      "type": "object",
      "properties": {
        "EthAmount": {
          "format": "double",
          "type": "number"
        },
        "GasPrice": { "type": "string" },
        "GasAmount": { "type": "string" },
        "WouldFail": { "type": "boolean" }
      }
    },
    "ResponseModel[EthBalance]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthBalance" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthBalance": {
      "type": "object",
      "properties": { "Amount": { "type": "string" } }
    },
    "ResponseModel[EthereumTransactionResponseContainer]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthereumTransactionResponseContainer" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthereumTransactionResponseContainer": {
      "type": "object",
      "properties": {
        "Transaction": { "$ref": "#/definitions/EthereumTransactionHistoricalResponse" },
        "Messages": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/EthereumInternalMessageHistoricalResponse" }
        },
        "ErcTransfers": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ErcEthPrivateWalletHistoryRecord" }
        }
      }
    },
    "EthereumTransactionHistoricalResponse": {
      "required": [ "TransactionIndex", "BlockNumber", "Value", "BlockTimestamp", "BlockTimeUtc", "HasError", "TransactionStatus" ],
      "type": "object",
      "properties": {
        "TransactionIndex": {
          "format": "int32",
          "type": "integer"
        },
        "BlockNumber": {
          "format": "int64",
          "type": "integer"
        },
        "Gas": { "type": "string" },
        "GasPrice": { "type": "string" },
        "Value": {
          "format": "double",
          "type": "number"
        },
        "Nonce": { "type": "string" },
        "TransactionHash": { "type": "string" },
        "BlockHash": { "type": "string" },
        "From": { "type": "string" },
        "To": { "type": "string" },
        "BlockTimestamp": {
          "format": "int32",
          "type": "integer"
        },
        "ContractAddress": { "type": "string" },
        "GasUsed": { "type": "string" },
        "BlockTimeUtc": {
          "format": "date-time",
          "type": "string"
        },
        "HasError": {
          "type": "boolean",
          "readOnly": true
        },
        "TransactionStatus": {
          "enum": [ "Pending", "Completed", "Failed" ],
          "type": "string",
          "x-ms-enum": {
            "name": "EthTransactionStatus",
            "modelAsString": false
          }
        },
        "Fee": { "type": "string" }
      }
    },
    "EthereumInternalMessageHistoricalResponse": {
      "required": [ "BlockNumber", "Depth", "Value", "MessageIndex", "BlockTimeUtc", "BlockTimestamp" ],
      "type": "object",
      "properties": {
        "TransactionHash": { "type": "string" },
        "BlockNumber": {
          "format": "int64",
          "type": "integer"
        },
        "FromAddress": { "type": "string" },
        "ToAddress": { "type": "string" },
        "Depth": {
          "format": "int32",
          "type": "integer"
        },
        "Value": {
          "format": "double",
          "type": "number"
        },
        "MessageIndex": {
          "format": "int32",
          "type": "integer"
        },
        "Type": { "type": "string" },
        "BlockTimeUtc": {
          "format": "date-time",
          "type": "string"
        },
        "BlockTimestamp": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ErcEthPrivateWalletHistoryRecord": {
      "type": "object",
      "properties": { "Transfer": { "$ref": "#/definitions/EthPrivateWalletHistoryRecord" } }
    },
    "EthPrivateWalletHistoryRecord": {
      "required": [ "TransactionStatus", "Value", "DateTime", "Amount" ],
      "type": "object",
      "properties": {
        "FromAddress": { "type": "string" },
        "ToAddress": { "type": "string" },
        "ContractAddress": { "type": "string" },
        "TransactionStatus": {
          "enum": [ "Pending", "Completed", "Failed" ],
          "type": "string",
          "x-ms-enum": {
            "name": "EthTransactionStatus",
            "modelAsString": false
          }
        },
        "Fee": { "type": "string" },
        "Value": {
          "format": "double",
          "type": "number"
        },
        "TransactionHash": { "type": "string" },
        "DateTime": {
          "format": "date-time",
          "type": "string"
        },
        "AssetId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "BaseAssetId": { "type": "string" },
        "AmountInBase": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[EthereumPrivateWalletHistory]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthereumPrivateWalletHistory" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthereumPrivateWalletHistory": {
      "type": "object",
      "properties": {
        "History": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/EthPrivateWalletHistoryRecord" }
        }
      }
    },
    "ResponseModel[EthereumAssetResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthereumAssetResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthereumAssetResponse": {
      "required": [ "StepsCount" ],
      "type": "object",
      "properties": {
        "StepsCount": {
          "format": "int32",
          "type": "integer"
        },
        "EthAssetId": { "type": "string" },
        "StepGas": { "type": "string" },
        "MinGas": { "type": "string" },
        "MaxGas": { "type": "string" },
        "MinGasPrice": { "type": "string" },
        "MaxGasPrice": { "type": "string" },
        "Bitcoin": { "$ref": "#/definitions/BitcoinFeeSettings" }
      }
    },
    "BitcoinFeeSettings": {
      "required": [ "MinFee", "MaxFee" ],
      "type": "object",
      "properties": {
        "MinFee": {
          "format": "double",
          "type": "number"
        },
        "MaxFee": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[EthereumPrivateWalletV2History]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/EthereumPrivateWalletV2History" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "EthereumPrivateWalletV2History": {
      "type": "object",
      "properties": {
        "Items": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/EthPrivateWalletHistoryRecordV2" }
        },
        "Continuation": { "type": "string" }
      }
    },
    "EthPrivateWalletHistoryRecordV2": {
      "required": [ "TransactionStatus", "Value", "DateTime", "Amount" ],
      "type": "object",
      "properties": {
        "FromAddress": { "type": "string" },
        "ToAddress": { "type": "string" },
        "ContractAddress": { "type": "string" },
        "TransactionStatus": {
          "enum": [ "Pending", "Completed", "Failed" ],
          "type": "string",
          "x-ms-enum": {
            "name": "EthTransactionStatus",
            "modelAsString": false
          }
        },
        "Fee": { "type": "string" },
        "Value": {
          "format": "double",
          "type": "number"
        },
        "TransactionHash": { "type": "string" },
        "DateTime": {
          "format": "date-time",
          "type": "string"
        },
        "AssetId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[ApiMarketOrder]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiMarketOrder" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ApiMarketOrder": {
      "required": [ "Volume", "TotalCost", "Comission", "Position", "Accuracy" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "OrderType": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "BaseAsset": { "type": "string" },
        "AssetPair": { "type": "string" },
        "TotalCost": {
          "format": "double",
          "type": "number"
        },
        "Comission": {
          "format": "double",
          "type": "number"
        },
        "Position": {
          "format": "double",
          "type": "number"
        },
        "Accuracy": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CreditVoucherContent": {
      "type": "object",
      "properties": {
        "ContentBase64": { "type": "string" },
        "Url": { "type": "string" }
      }
    },
    "ResponseModel[CreditVoucherFormattedContent]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/CreditVoucherFormattedContent" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "CreditVoucherFormattedContent": {
      "type": "object",
      "properties": { "FormattedContentBase64": { "type": "string" } }
    },
    "ForwardWithdrawalModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "GenerateTransferTransactionForBitcoinModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "Fee": {
          "format": "double",
          "type": "number"
        },
        "SourceAddress": { "type": "string" },
        "DestinationAddress": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "AssetId": { "type": "string" }
      }
    },
    "ResponseModel[ApiTransaction]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiTransaction" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[GetGraphPeriodsRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetGraphPeriodsRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetGraphPeriodsRespModel": {
      "type": "object",
      "properties": {
        "AvailablePeriods": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/GraphPeriod" }
        },
        "LastSelectedPeriod": { "$ref": "#/definitions/GraphPeriod" }
      }
    },
    "GraphPeriod": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Value": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PasswordHashModel": {
      "type": "object",
      "properties": { "PwdHash": { "type": "string" } }
    },
    "ResponseModel[IEnumerable[HistoryRecordModel]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/HistoryRecordModel" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "HistoryRecordModel": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "CashInOut": { "$ref": "#/definitions/ApiBalanceChangeModel" },
        "Trade": { "$ref": "#/definitions/ApiTradeOperation" },
        "Transfer": { "$ref": "#/definitions/ApiTransfer" },
        "CashOutAttempt": { "$ref": "#/definitions/ApiCashOutAttempt" },
        "CashOutCancelled": { "$ref": "#/definitions/ApiCashOutCancelled" },
        "CashOutDone": { "$ref": "#/definitions/ApiCashOutDone" },
        "LimitTradeEvent": { "$ref": "#/definitions/ApiLimitTradeEvent" }
      }
    },
    "ApiBalanceChangeModel": {
      "required": [ "Amount", "IsRefund", "IsSettled", "State" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "DateTime": { "type": "string" },
        "Asset": { "type": "string" },
        "IconId": { "type": "string" },
        "BlockChainHash": { "type": "string" },
        "IsRefund": { "type": "boolean" },
        "AddressFrom": { "type": "string" },
        "AddressTo": { "type": "string" },
        "IsSettled": { "type": "boolean" },
        "Type": { "type": "string" },
        "State": {
          "enum": [ "InProcessOnchain", "SettledOnchain", "InProcessOffchain", "SettledOffchain", "SettledNoChain" ],
          "type": "string",
          "x-ms-enum": {
            "name": "TransactionStates",
            "modelAsString": false
          }
        },
        "Fee": { "$ref": "#/definitions/Fee" }
      }
    },
    "ApiTradeOperation": {
      "required": [ "Volume", "IsSettled", "State", "IsLimitTrade" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "Asset": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "IconId": { "type": "string" },
        "BlockChainHash": { "type": "string" },
        "AddressFrom": { "type": "string" },
        "AddressTo": { "type": "string" },
        "IsSettled": { "type": "boolean" },
        "State": {
          "enum": [ "InProcessOnchain", "SettledOnchain", "InProcessOffchain", "SettledOffchain", "SettledNoChain" ],
          "type": "string",
          "x-ms-enum": {
            "name": "TransactionStates",
            "modelAsString": false
          }
        },
        "MarketOrder": { "$ref": "#/definitions/ApiMarketOrder" },
        "OrderId": { "type": "string" },
        "LimitOrderId": { "type": "string" },
        "MarketOrderId": { "type": "string" },
        "IsLimitTrade": { "type": "boolean" },
        "Fee": { "$ref": "#/definitions/Fee" }
      }
    },
    "ApiTransfer": {
      "required": [ "Volume", "IsSettled", "State" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "Asset": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "IconId": { "type": "string" },
        "BlockChainHash": { "type": "string" },
        "AddressFrom": { "type": "string" },
        "AddressTo": { "type": "string" },
        "IsSettled": { "type": "boolean" },
        "Fee": { "$ref": "#/definitions/Fee" },
        "State": {
          "enum": [ "InProcessOnchain", "SettledOnchain", "InProcessOffchain", "SettledOffchain", "SettledNoChain" ],
          "type": "string",
          "x-ms-enum": {
            "name": "TransactionStates",
            "modelAsString": false
          }
        }
      }
    },
    "ApiCashOutAttempt": {
      "required": [ "Volume" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "Asset": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "IconId": { "type": "string" }
      }
    },
    "ApiCashOutCancelled": {
      "required": [ "Volume" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "Asset": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "IconId": { "type": "string" }
      }
    },
    "ApiCashOutDone": {
      "required": [ "Volume" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "Asset": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "IconId": { "type": "string" }
      }
    },
    "ApiLimitTradeEvent": {
      "required": [ "Volume", "Price", "TotalCost" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "OrderId": { "type": "string" },
        "DateTime": { "type": "string" },
        "Asset": { "type": "string" },
        "AssetPair": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "Status": { "type": "string" },
        "Type": { "type": "string" },
        "TotalCost": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Fee": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Type": { "type": "string" }
      }
    },
    "ResponseModel[ApiLimitOrder]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiLimitOrder" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ApiLimitOrder": {
      "required": [ "Volume", "RemainingVolume", "RemainingOtherVolume", "Price", "TotalCost", "Accuracy" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "OrderType": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "RemainingVolume": {
          "format": "double",
          "type": "number"
        },
        "RemainingOtherVolume": {
          "format": "double",
          "type": "number"
        },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "BaseAsset": { "type": "string" },
        "AssetPair": { "type": "string" },
        "TotalCost": {
          "format": "double",
          "type": "number"
        },
        "Accuracy": {
          "format": "int32",
          "type": "integer"
        },
        "OrderStatus": { "type": "string" }
      }
    },
    "HotWalletOperation": {
      "required": [ "Volume" ],
      "type": "object",
      "properties": {
        "AssetPair": { "type": "string" },
        "AssetId": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[HotWalletSuccessTradeRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/HotWalletSuccessTradeRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "HotWalletSuccessTradeRespModel": {
      "type": "object",
      "properties": { "Order": { "$ref": "#/definitions/ApiHotWalletOrder" } }
    },
    "ApiHotWalletOrder": {
      "required": [ "DateTime", "Volume", "Price", "TotalCost" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": {
          "format": "date-time",
          "type": "string"
        },
        "OrderType": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "Asset": { "type": "string" },
        "AssetPair": { "type": "string" },
        "TotalCost": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "HotWalletLimitOperation": {
      "required": [ "Price", "Volume" ],
      "type": "object",
      "properties": {
        "Price": {
          "format": "double",
          "type": "number"
        },
        "AssetPair": { "type": "string" },
        "AssetId": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "HotWalletCashoutOperation": {
      "required": [ "Volume" ],
      "type": "object",
      "properties": {
        "DestinationAddressExtension": { "type": "string" },
        "DestinationAddress": { "type": "string" },
        "AssetId": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[BlockchainAddressValidityResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/BlockchainAddressValidityResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "BlockchainAddressValidityResponseModel": {
      "required": [ "IsValid" ],
      "type": "object",
      "properties": { "IsValid": { "type": "boolean" } }
    },
    "ResponseModel[GetIcoCounsSoldResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetIcoCounsSoldResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetIcoCounsSoldResponseModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "Amount": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "PostRevertAssetPairModel": {
      "required": [ "Inverted" ],
      "type": "object",
      "properties": {
        "AssetPairId": { "type": "string" },
        "Inverted": { "type": "boolean" }
      }
    },
    "IsAliveResponse": {
      "type": "object",
      "properties": {
        "Version": { "type": "string" },
        "Env": { "type": "string" },
        "OtherInfo": { "type": "string" }
      }
    },
    "ResponseModel[IsPinSecurityEnabledResultModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/IsPinSecurityEnabledResultModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "IsPinSecurityEnabledResultModel": {
      "required": [ "IsEnabled" ],
      "type": "object",
      "properties": { "IsEnabled": { "type": "boolean" } }
    },
    "ResponseModel[IEnumerable[ApiIssuer]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiIssuer" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ApiIssuer": {
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "IconUrl": { "type": "string" },
        "Id": { "type": "string" }
      }
    },
    "ResponseModel[ApiIssuer]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiIssuer" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[KycDocumentsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/KycDocumentsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "KycDocumentsModel": {
      "type": "object",
      "properties": {
        "Docs": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/KycDocumentModel" }
        }
      }
    },
    "KycDocumentModel": {
      "type": "object",
      "properties": {
        "Type": { "type": "string" },
        "IdType": { "type": "string" },
        "DocumentId": { "type": "string" },
        "DocumentState": { "type": "string" },
        "KycComment": { "type": "string" }
      }
    },
    "KycDocumentsModelDeprecated": {
      "type": "object",
      "properties": {
        "Type": { "type": "string" },
        "Ext": { "type": "string" },
        "Data": { "type": "string" },
        "IdType": {
          "enum": [ "Unknown", "Passport", "Id", "DrivingLicense" ],
          "type": "string",
          "x-ms-enum": {
            "name": "IdCardType",
            "modelAsString": false
          }
        }
      }
    },
    "ResponseModel[PostKycDocumentRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/PostKycDocumentRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PostKycDocumentRespModel": {
      "type": "object",
      "properties": { "PersonalData": { "$ref": "#/definitions/ApiPersonalDataModel" } }
    },
    "ResponseModel[KycForAssetResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/KycForAssetResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "KycForAssetResponseModel": {
      "required": [ "UserKycStatus", "KycNeeded" ],
      "type": "object",
      "properties": {
        "UserKycStatus": {
          "enum": [ "NeedToFillData", "Pending", "Ok", "Rejected", "RestrictedArea" ],
          "type": "string",
          "x-ms-enum": {
            "name": "ApiKycStatus",
            "modelAsString": false
          }
        },
        "KycNeeded": { "type": "boolean" },
        "ProfileType": { "type": "string" }
      }
    },
    "ResponseModel[KycProfilesResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/KycProfilesResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "KycProfilesResponseModel": {
      "type": "object",
      "properties": {
        "Type": { "type": "string" },
        "Title": { "type": "string" },
        "Status": { "type": "string" },
        "Requirements": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/RequirementModel" }
        },
        "Documents": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/DocumentModel" }
        }
      }
    },
    "RequirementModel": {
      "type": "object",
      "properties": {
        "Type": { "type": "string" },
        "Title": { "type": "string" },
        "Documents": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/DocumentRequirementModel" }
        }
      }
    },
    "DocumentModel": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Type": { "type": "string" },
        "Status": { "type": "string" },
        "RejectReason": { "type": "string" },
        "Files": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/FileModel" }
        }
      }
    },
    "DocumentRequirementModel": {
      "type": "object",
      "properties": {
        "Type": { "type": "string" },
        "Title": { "type": "string" },
        "Files": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/FileRequirementModel" }
        }
      }
    },
    "FileModel": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Type": { "type": "string" },
        "Title": { "type": "string" },
        "ContentType": { "type": "string" },
        "FileName": { "type": "string" }
      }
    },
    "FileRequirementModel": {
      "required": [ "Optional" ],
      "type": "object",
      "properties": {
        "Type": { "type": "string" },
        "Title": { "type": "string" },
        "Optional": { "type": "boolean" }
      }
    },
    "ResponseModel[Dictionary[String,DocumentModel]]": {
      "type": "object",
      "properties": {
        "Result": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/DocumentModel" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[GetKycStatusRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetKycStatusRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetKycStatusRespModel": {
      "required": [ "KycStatus" ],
      "type": "object",
      "properties": {
        "KycStatus": {
          "enum": [ "NeedToFillData", "Pending", "Ok", "Rejected", "RestrictedArea" ],
          "type": "string",
          "x-ms-enum": {
            "name": "ApiKycStatus",
            "modelAsString": false
          }
        },
        "PersonalData": { "$ref": "#/definitions/ApiPersonalDataModel" }
      }
    },
    "ResponseModel[PostKycStatusRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/PostKycStatusRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PostKycStatusRespModel": {
      "type": "object",
      "properties": { "PersonalData": { "$ref": "#/definitions/ApiPersonalDataModel" } }
    },
    "ResponseModel[GetLastBaseAssetsRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetLastBaseAssetsRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetLastBaseAssetsRespModel": {
      "type": "object",
      "properties": {
        "Assets": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiAssetModel" }
        }
      }
    },
    "ResponseModel[OffchainLimitOrdersRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OffchainLimitOrdersRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OffchainLimitOrdersRespModel": {
      "type": "object",
      "properties": {
        "Orders": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiOffchainOrder" }
        }
      }
    },
    "ApiOffchainOrder": {
      "required": [ "Volume", "Price", "TotalCost", "RemainingVolume", "RemainingOtherVolume" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "DateTime": { "type": "string" },
        "OrderType": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "Asset": { "type": "string" },
        "AssetPair": { "type": "string" },
        "TotalCost": {
          "format": "double",
          "type": "number"
        },
        "RemainingVolume": {
          "format": "double",
          "type": "number"
        },
        "RemainingOtherVolume": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[OffchainLimitOrdersCountRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OffchainLimitOrdersCountRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OffchainLimitOrdersCountRespModel": {
      "required": [ "Count" ],
      "type": "object",
      "properties": {
        "Count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ResponseModel[IEnumerable[ILykkeNewsRecord]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ILykkeNewsRecord" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ILykkeNewsRecord": {
      "required": [ "DateTime" ],
      "type": "object",
      "properties": {
        "Author": { "type": "string" },
        "Title": { "type": "string" },
        "DateTime": {
          "format": "date-time",
          "type": "string"
        },
        "ImgUrl": { "type": "string" },
        "Url": { "type": "string" },
        "Text": { "type": "string" }
      }
    },
    "ChangeMarginAccountBalanceModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "AccountId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MarginSwiftCashOutReqModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "MarginAccountId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Bic": { "type": "string" },
        "AccNumber": { "type": "string" },
        "AccName": { "type": "string" },
        "AccHolderAddress": { "type": "string" },
        "BankName": { "type": "string" },
        "AccHolderCountry": { "type": "string" },
        "AccHolderZipCode": { "type": "string" },
        "AccHolderCity": { "type": "string" }
      }
    },
    "ToBaseConvertionRequest": {
      "type": "object",
      "properties": {
        "BaseAssetId": { "type": "string" },
        "AssetsFrom": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/AssetWithAmount" }
        },
        "OrderAction": { "type": "string" }
      }
    },
    "AssetWithAmount": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[ToBaseConvertionResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ToBaseConvertionResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ToBaseConvertionResponse": {
      "type": "object",
      "properties": {
        "Converted": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ConversionResult" }
        }
      }
    },
    "ConversionResult": {
      "required": [ "Price", "VolumePrice", "Result" ],
      "type": "object",
      "properties": {
        "From": { "$ref": "#/definitions/AssetWithAmount" },
        "To": { "$ref": "#/definitions/AssetWithAmount" },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "VolumePrice": {
          "format": "double",
          "type": "number"
        },
        "Result": {
          "enum": [ "Unknown", "Ok", "InvalidInputParameters", "NoLiquidity" ],
          "type": "string",
          "x-ms-enum": {
            "name": "OperationResult",
            "modelAsString": false
          }
        }
      }
    },
    "PostMyLykkeCashInEmailModel": {
      "required": [ "Amount", "LkkAmount", "Price" ],
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "LkkAmount": {
          "format": "double",
          "type": "number"
        },
        "Price": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[GetMyLykkeInfoRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetMyLykkeInfoRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetMyLykkeInfoRespModel": {
      "required": [ "LkkTotalAmount", "LkkBalance", "NumberOfShares", "MarketValueUSD", "MyEquityPercent" ],
      "type": "object",
      "properties": {
        "LkkTotalAmount": {
          "format": "int32",
          "type": "integer"
        },
        "LkkBalance": {
          "format": "int32",
          "type": "integer"
        },
        "BtcConversionWalletAddress": { "type": "string" },
        "NumberOfShares": {
          "format": "int32",
          "type": "integer"
        },
        "MarketValueUSD": {
          "format": "double",
          "type": "number"
        },
        "MyEquityPercent": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[MyLykkeSettingsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/MyLykkeSettingsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "MyLykkeSettingsModel": {
      "required": [ "MyLykkeEnabled" ],
      "type": "object",
      "properties": { "MyLykkeEnabled": { "type": "boolean" } }
    },
    "ResponseModel[OffchainRequestResponsesModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OffchainRequestResponsesModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OffchainRequestResponsesModel": {
      "type": "object",
      "properties": {
        "Requests": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/OffchainRequestResponseModel" }
        }
      }
    },
    "OffchainRequestResponseModel": {
      "required": [ "Type" ],
      "type": "object",
      "properties": {
        "Asset": { "type": "string" },
        "RequestId": { "type": "string" },
        "Type": {
          "enum": [ "None", "RequestTransfer" ],
          "type": "string",
          "x-ms-enum": {
            "name": "RequestType",
            "modelAsString": false
          }
        }
      }
    },
    "OffchainLimitCancelModel": {
      "type": "object",
      "properties": { "OrderId": { "type": "string" } }
    },
    "OffchainChannelProcessModel": {
      "type": "object",
      "properties": {
        "TransferId": { "type": "string" },
        "SignedChannelTransaction": { "type": "string" }
      }
    },
    "ResponseModel[OffchainTradeRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OffchainTradeRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OffchainTradeRespModel": {
      "required": [ "OperationResult" ],
      "type": "object",
      "properties": {
        "TransferId": { "type": "string" },
        "TransactionHex": { "type": "string" },
        "OperationResult": {
          "enum": [ "Transfer", "CreateChannel", "ClientCommitment" ],
          "type": "string",
          "x-ms-enum": {
            "name": "OffchainOperationResult",
            "modelAsString": false
          }
        }
      }
    },
    "OffchainFinalizeModel": {
      "type": "object",
      "properties": {
        "TransferId": { "type": "string" },
        "ClientRevokePubKey": { "type": "string" },
        "ClientRevokeEncryptedPrivateKey": { "type": "string" },
        "SignedTransferTransaction": { "type": "string" }
      }
    },
    "ResponseModel[OffchainSuccessTradeRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OffchainSuccessTradeRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OffchainSuccessTradeRespModel": {
      "required": [ "OperationResult" ],
      "type": "object",
      "properties": {
        "TransferId": { "type": "string" },
        "TransactionHex": { "type": "string" },
        "OperationResult": {
          "enum": [ "Transfer", "CreateChannel", "ClientCommitment" ],
          "type": "string",
          "x-ms-enum": {
            "name": "OffchainOperationResult",
            "modelAsString": false
          }
        },
        "Order": { "$ref": "#/definitions/ApiOffchainOrder" }
      }
    },
    "OffchainRequestTransferModel": {
      "type": "object",
      "properties": {
        "RequestId": { "type": "string" },
        "PrevTempPrivateKey": { "type": "string" }
      }
    },
    "ResponseModel[OffchainEncryptedKeyRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OffchainEncryptedKeyRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OffchainEncryptedKeyRespModel": {
      "type": "object",
      "properties": { "Key": { "type": "string" } }
    },
    "OffchainTransferToMarginModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "AccountId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "PrevTempPrivateKey": { "type": "string" }
      }
    },
    "OffchainTransferToTrustedWalletModel": {
      "type": "object",
      "properties": { "PrevTempPrivateKey": { "type": "string" } }
    },
    "OffchainCashoutModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "Destination": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Asset": { "type": "string" },
        "PrevTempPrivateKey": { "type": "string" }
      }
    },
    "ResponseModel[CashoutSwiftFeeResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/CashoutSwiftFeeResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "CashoutSwiftFeeResponse": {
      "required": [ "Size" ],
      "type": "object",
      "properties": {
        "Size": {
          "format": "double",
          "type": "number"
        },
        "AssetId": { "type": "string" },
        "Country": { "type": "string" }
      }
    },
    "OffchainCashoutSwiftModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Asset": { "type": "string" },
        "PrevTempPrivateKey": { "type": "string" },
        "Bic": { "type": "string" },
        "AccNumber": { "type": "string" },
        "AccName": { "type": "string" },
        "AccHolderAddress": { "type": "string" },
        "BankName": { "type": "string" },
        "AccHolderCountry": { "type": "string" },
        "AccHolderZipCode": { "type": "string" },
        "AccHolderCity": { "type": "string" }
      }
    },
    "ResponseModel[CashoutSwiftLastDataResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/CashoutSwiftLastDataResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "CashoutSwiftLastDataResponse": {
      "type": "object",
      "properties": {
        "Bic": { "type": "string" },
        "AccNumber": { "type": "string" },
        "AccName": { "type": "string" },
        "BankName": { "type": "string" },
        "AccHolderAddress": { "type": "string" },
        "AccHolderCity": { "type": "string" },
        "AccHolderCountry": { "type": "string" },
        "AccHolderZipCode": { "type": "string" }
      }
    },
    "OffchainCashoutForwardModel": {
      "required": [ "Amount" ],
      "type": "object",
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Asset": { "type": "string" },
        "PrevTempPrivateKey": { "type": "string" }
      }
    },
    "ResponseModel[ApiTransaction[]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiTransaction" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PostSignedTransactionsModel": {
      "type": "object",
      "properties": {
        "Transactions": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiTransaction" }
        }
      }
    },
    "ResponseModel[OperationCollectionModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OperationCollectionModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OperationCollectionModel": {
      "type": "object",
      "properties": {
        "Operations": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/OperationModel" }
        }
      }
    },
    "OperationModel": {
      "required": [ "Id", "Created", "Type", "Status" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Type": {
          "enum": [ "Transfer", "VisaCardPayment", "MarketOrder", "LimitOrder", "NewOrder", "CashoutSwift", "Cashout", "StopLimitOrder" ],
          "type": "string",
          "x-ms-enum": {
            "name": "OperationType",
            "modelAsString": false
          }
        },
        "Status": {
          "enum": [ "Created", "Accepted", "Confirmed", "Completed", "Canceled", "Failed", "Corrupted" ],
          "type": "string",
          "x-ms-enum": {
            "name": "OperationStatus",
            "modelAsString": false
          }
        },
        "Transfer": { "$ref": "#/definitions/TransferContext" }
      }
    },
    "TransferContext": {
      "required": [ "Amount", "SourceWalletId", "WalletId", "TransferType" ],
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "SourceWalletId": {
          "format": "uuid",
          "type": "string"
        },
        "WalletId": {
          "format": "uuid",
          "type": "string"
        },
        "TransferType": {
          "enum": [ "TrustedToTrusted", "TradingToTrusted", "TrustedToTrading" ],
          "type": "string",
          "x-ms-enum": {
            "name": "TransferType",
            "modelAsString": false
          }
        }
      }
    },
    "ResponseModel[OperationModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OperationModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[ApiOrderBook]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiOrderBook" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ApiOrderBook": {
      "type": "object",
      "properties": {
        "BuyOrders": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiOrderBookLine" }
        },
        "SellOrders": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiOrderBookLine" }
        }
      }
    },
    "ApiOrderBookLine": {
      "required": [ "Price", "Volume" ],
      "type": "object",
      "properties": {
        "Price": {
          "format": "double",
          "type": "number"
        },
        "Volume": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[ApiPersonalDataModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiPersonalDataModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[PinSecurityCheckResultModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/PinSecurityCheckResultModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PinSecurityCheckResultModel": {
      "required": [ "Passed" ],
      "type": "object",
      "properties": {
        "Passed": { "type": "boolean" },
        "Settings": { "$ref": "#/definitions/ApiAppSettingsModel" }
      }
    },
    "PinSecurityChangeModel": {
      "type": "object",
      "properties": { "Pin": { "type": "string" } }
    },
    "PinSecurityCheckRequestModel": {
      "type": "object",
      "properties": { "Pin": { "type": "string" } }
    },
    "ResponseModel[OwnershipMsgModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OwnershipMsgModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OwnershipMsgModel": {
      "type": "object",
      "properties": { "Message": { "type": "string" } }
    },
    "OwnershipConfirmedModelRequest": {
      "type": "object",
      "properties": {
        "PartnerId": { "type": "string" },
        "Email": { "type": "string" },
        "SignedOwnershipMsg": { "type": "string" }
      }
    },
    "ResponseModel[OwnershipConfirmedModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/OwnershipConfirmedModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "OwnershipConfirmedModel": {
      "required": [ "Confirmed" ],
      "type": "object",
      "properties": { "Confirmed": { "type": "boolean" } }
    },
    "OwnershipMsgRequestModel": {
      "type": "object",
      "properties": {
        "PartnerId": { "type": "string" },
        "Email": { "type": "string" }
      }
    },
    "CreatePrivateWalletModel": {
      "required": [ "Blockchain" ],
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "Name": { "type": "string" },
        "EncodedPrivateKey": { "type": "string" },
        "IsColdStorage": { "type": "boolean" },
        "Blockchain": {
          "enum": [ "None", "Bitcoin", "Ethereum" ],
          "type": "string",
          "x-ms-enum": {
            "name": "Blockchain",
            "modelAsString": false
          }
        },
        "Number": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ResponseModel[GetPrivateWalletsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetPrivateWalletsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetPrivateWalletsModel": {
      "type": "object",
      "properties": {
        "Wallets": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiPrivateWallet" }
        }
      }
    },
    "ApiPrivateWallet": {
      "required": [ "IsColdStorage", "Blockchain" ],
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "Name": { "type": "string" },
        "EncodedPrivateKey": { "type": "string" },
        "IsColdStorage": { "type": "boolean" },
        "Number": {
          "format": "int32",
          "type": "integer"
        },
        "SmallIconUrl": { "type": "string" },
        "MediumIconUrl": { "type": "string" },
        "LargeIconUrl": { "type": "string" },
        "Balances": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiBalanceRecord" }
        },
        "Blockchain": {
          "enum": [ "None", "Bitcoin", "Ethereum" ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "Blockchain",
            "modelAsString": false
          }
        }
      }
    },
    "ApiBalanceRecord": {
      "required": [ "Balance" ],
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "Balance": {
          "format": "double",
          "type": "number"
        },
        "BaseAssetId": { "type": "string" },
        "AmountInBase": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "EditPrivateWalletModel": {
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "Name": { "type": "string" }
      }
    },
    "ResponseModel[ApiPrivateWallet]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiPrivateWallet" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "SetKeyModel": {
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "EncodedKey": { "type": "string" }
      }
    },
    "PrivateWalletBackupModel": {
      "type": "object",
      "properties": {
        "WalletName": { "type": "string" },
        "WalletAddress": { "type": "string" },
        "SecurityQuestion": { "type": "string" },
        "PrivateKeyBackup": { "type": "string" }
      }
    },
    "ResponseModel[GetPrivateWalletBalancesModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetPrivateWalletBalancesModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetPrivateWalletBalancesModel": {
      "type": "object",
      "properties": {
        "Balances": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiBalanceRecord" }
        }
      }
    },
    "ResponseModel[PrivateWalletHistoryRecord[]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/PrivateWalletHistoryRecord" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PrivateWalletHistoryRecord": {
      "required": [ "DateTime", "Amount" ],
      "type": "object",
      "properties": {
        "TransactionHash": { "type": "string" },
        "DateTime": {
          "format": "date-time",
          "type": "string"
        },
        "AssetId": { "type": "string" },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "BaseAssetId": { "type": "string" },
        "AmountInBase": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ProfileModel": {
      "type": "object",
      "properties": {
        "Type": { "type": "string" },
        "Title": { "type": "string" },
        "Status": { "type": "string" },
        "Requirements": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/RequirementModel" }
        },
        "Documents": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/DocumentModel" }
        }
      }
    },
    "SubmitResultModel": {
      "required": [ "Success" ],
      "type": "object",
      "properties": {
        "Success": { "type": "boolean" },
        "Errors": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "ResponseModel[PubkeyAddressValidationRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/PubkeyAddressValidationRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PubkeyAddressValidationRespModel": {
      "required": [ "Valid" ],
      "type": "object",
      "properties": { "Valid": { "type": "boolean" } }
    },
    "PurchaseAssetsModel": {
      "required": [ "Volume", "Rate" ],
      "type": "object",
      "properties": {
        "BaseAsset": { "type": "string" },
        "AssetPair": { "type": "string" },
        "Volume": {
          "format": "double",
          "type": "number"
        },
        "Rate": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[PurchaseAssetRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/PurchaseAssetRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PurchaseAssetRespModel": {
      "type": "object",
      "properties": {
        "Order": { "$ref": "#/definitions/ApiMarketOrder" },
        "Trades": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiTradeOperation" }
        }
      }
    },
    "ResponseModel[PushNotificationsSettingsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/PushNotificationsSettingsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "PushNotificationsSettingsModel": {
      "required": [ "Enabled" ],
      "type": "object",
      "properties": { "Enabled": { "type": "boolean" } }
    },
    "PostRecoverySmsConfirmationModel": {
      "type": "object",
      "properties": {
        "PartnerId": { "type": "string" },
        "Email": { "type": "string" },
        "SignedOwnershipMsg": { "type": "string" }
      }
    },
    "ResponseModel[RecoverySmsConfirmationResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/RecoverySmsConfirmationResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "RecoverySmsConfirmationResponseModel": {
      "type": "object",
      "properties": {
        "NewOwnershipMsgToSign": { "type": "string" },
        "PhoneNumber": { "type": "string" }
      }
    },
    "PostRefundAddressModel": {
      "type": "object",
      "properties": { "Address": { "type": "string" } }
    },
    "ResponseModel[GetRefundAddressResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetRefundAddressResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetRefundAddressResponseModel": {
      "type": "object",
      "properties": { "Address": { "type": "string" } }
    },
    "RefundSettingsModel": {
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "ValidDays": {
          "format": "int32",
          "type": "integer"
        },
        "SendAutomatically": { "type": "boolean" }
      }
    },
    "ResponseModel[RefundSettingsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/RefundSettingsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[GetRegistrationStatusResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetRegistrationStatusResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetRegistrationStatusResponseModel": {
      "required": [ "KycStatus", "PinIsEntered" ],
      "type": "object",
      "properties": {
        "KycStatus": {
          "enum": [ "NeedToFillData", "Pending", "Ok", "Rejected", "RestrictedArea" ],
          "type": "string",
          "x-ms-enum": {
            "name": "ApiKycStatus",
            "modelAsString": false
          }
        },
        "PinIsEntered": { "type": "boolean" },
        "PersonalData": { "$ref": "#/definitions/ApiPersonalDataModel" }
      }
    },
    "AccountRegistrationModel": {
      "type": "object",
      "properties": {
        "Email": { "type": "string" },
        "FullName": { "type": "string" },
        "ContactPhone": { "type": "string" },
        "Password": { "type": "string" },
        "Hint": { "type": "string" },
        "ClientInfo": { "type": "string" },
        "PartnerId": { "type": "string" },
        "CountryIso3Poa": { "type": "string" },
        "AffiliateCode": { "type": "string" }
      }
    },
    "ResponseModel[AccountsRegistrationResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/AccountsRegistrationResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "AccountsRegistrationResponseModel": {
      "required": [ "CanCashInViaBankCard", "SwiftDepositEnabled", "State" ],
      "type": "object",
      "properties": {
        "Token": { "type": "string" },
        "NotificationsId": { "type": "string" },
        "PersonalData": { "$ref": "#/definitions/ApiPersonalDataModel" },
        "CanCashInViaBankCard": { "type": "boolean" },
        "SwiftDepositEnabled": { "type": "boolean" },
        "State": {
          "enum": [ "Ok", "Suspended", "Blocked" ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccountState",
            "modelAsString": false
          }
        }
      }
    },
    "ResponseModel[Boolean]": {
      "required": [ "Result" ],
      "type": "object",
      "properties": {
        "Result": { "type": "boolean" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "RemindPasswordEmailModel": {
      "type": "object",
      "properties": {
        "PartnerId": { "type": "string" },
        "Email": { "type": "string" }
      }
    },
    "RequestVoiceCallModel": {
      "type": "object",
      "properties": {
        "PhoneNumber": { "type": "string" },
        "Email": { "type": "string" }
      }
    },
    "ResponseModel[String]": {
      "type": "object",
      "properties": {
        "Result": { "type": "string" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[TextResource]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/TextResource" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "TextResource": {
      "type": "object",
      "properties": {
        "Lang": { "type": "string" },
        "Name": { "type": "string" },
        "Value": { "type": "string" }
      }
    },
    "ResponseModel[IEnumerable[TextResource]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/TextResource" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[GroupResource]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GroupResource" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GroupResource": {
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "Value": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/GroupItem" }
        }
      }
    },
    "GroupItem": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Value": { "type": "string" }
      }
    },
    "ResponseModel[IEnumerable[GroupResource]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/GroupResource" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[RestrictedCountriesResponseModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/RestrictedCountriesResponseModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "RestrictedCountriesResponseModel": {
      "type": "object",
      "properties": {
        "RestrictedCountires": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "ResponseModel[SendWalletByEmailRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/SendWalletByEmailRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "SendWalletByEmailRespModel": {
      "type": "object",
      "properties": { "Email": { "type": "string" } }
    },
    "SetSignOrderSettingsModel": {
      "required": [ "SignOrderBeforeGo" ],
      "type": "object",
      "properties": { "SignOrderBeforeGo": { "type": "boolean" } }
    },
    "ResponseModel[SetSignOrderSettingsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/SetSignOrderSettingsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[RecoveryTokenChallange]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/RecoveryTokenChallange" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "RecoveryTokenChallange": {
      "type": "object",
      "properties": { "Message": { "type": "string" } }
    },
    "RecoveryTokenChallangeResponse": {
      "type": "object",
      "properties": {
        "Email": { "type": "string" },
        "PartnerId": { "type": "string" },
        "SignedMessage": { "type": "string" }
      }
    },
    "ResponseModel[RecoveryToken]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/RecoveryToken" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "RecoveryToken": {
      "type": "object",
      "properties": { "AccessToken": { "type": "string" } }
    },
    "SignedRequestModel": {
      "required": [ "RequestId" ],
      "type": "object",
      "properties": {
        "RequestId": {
          "format": "uuid",
          "type": "string"
        },
        "MultisigAddress": { "type": "string" },
        "Sign": { "type": "string" }
      }
    },
    "ResponseModel[GetSwiftCredentialsModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetSwiftCredentialsModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetSwiftCredentialsModel": {
      "type": "object",
      "properties": {
        "BIC": { "type": "string" },
        "AccountNumber": { "type": "string" },
        "AccountName": { "type": "string" },
        "PurposeOfPayment": { "type": "string" },
        "BankAddress": { "type": "string" },
        "CompanyAddress": { "type": "string" },
        "CorrespondentAccount": { "type": "string" }
      }
    },
    "ResponseModel[TermsOfUseСonsentModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/TermsOfUseСonsentModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "TermsOfUseСonsentModel": {
      "type": "object",
      "properties": {
        "NeedAccept": {
          "type": "boolean",
          "readOnly": true
        },
        "DataConsentAccepted": {
          "format": "date-time",
          "type": "string"
        },
        "DataConsentForMarketingAccepted": {
          "format": "date-time",
          "type": "string"
        },
        "GeneralTermsOfUseAccepted": {
          "format": "date-time",
          "type": "string"
        },
        "TradingVenuesAccepted": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "PutTermsOfUseСonsentModel": {
      "required": [ "DataConsentAccepted", "GeneralTermsOfUseAccepted", "TradingVenuesAccepted" ],
      "type": "object",
      "properties": {
        "DataConsentAccepted": { "type": "boolean" },
        "DataConsentForMarketingAccepted": { "type": "boolean" },
        "GeneralTermsOfUseAccepted": { "type": "boolean" },
        "TradingVenuesAccepted": { "type": "boolean" }
      }
    },
    "ResponseModel[TierInfoResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/TierInfoResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "TierInfoResponse": {
      "required": [ "QuestionnaireAnswered" ],
      "type": "object",
      "properties": {
        "CurrentTier": { "$ref": "#/definitions/CurrentTierInfo" },
        "NextTier": { "$ref": "#/definitions/TierInfo" },
        "UpgradeRequest": { "$ref": "#/definitions/UpgradeRequest" },
        "QuestionnaireAnswered": { "type": "boolean" }
      }
    },
    "CurrentTierInfo": {
      "required": [ "Tier", "Current", "MaxLimit" ],
      "type": "object",
      "properties": {
        "Tier": {
          "enum": [ "Beginner", "Advanced", "ProIndividual" ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccountTier",
            "modelAsString": false
          }
        },
        "Asset": { "type": "string" },
        "Current": {
          "format": "double",
          "type": "number"
        },
        "MaxLimit": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "TierInfo": {
      "required": [ "Tier", "MaxLimit" ],
      "type": "object",
      "properties": {
        "Tier": {
          "enum": [ "Beginner", "Advanced", "ProIndividual" ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccountTier",
            "modelAsString": false
          }
        },
        "MaxLimit": {
          "format": "double",
          "type": "number"
        },
        "Documents": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "UpgradeRequest": {
      "required": [ "Tier", "SubmitDate", "Limit" ],
      "type": "object",
      "properties": {
        "Tier": {
          "enum": [ "Beginner", "Advanced", "ProIndividual" ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccountTier",
            "modelAsString": false
          }
        },
        "SubmitDate": {
          "format": "date-time",
          "type": "string"
        },
        "Status": { "type": "string" },
        "Limit": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ResponseModel[QuestionnaireResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/QuestionnaireResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "QuestionnaireResponse": {
      "type": "object",
      "properties": {
        "Questionnaire": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/QuestionModel" }
        }
      }
    },
    "QuestionModel": {
      "required": [ "Type", "Required", "HasOther" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Text": { "type": "string" },
        "Type": {
          "enum": [ "Single", "Multiple", "Text" ],
          "type": "string",
          "x-ms-enum": {
            "name": "QuestionTypeModel",
            "modelAsString": false
          }
        },
        "Required": { "type": "boolean" },
        "HasOther": { "type": "boolean" },
        "Answers": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/AnswerModel" }
        }
      }
    },
    "AnswerModel": {
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Text": { "type": "string" }
      }
    },
    "AnswersRequest": {
      "type": "object",
      "properties": {
        "Answers": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ChoiceModel" }
        }
      }
    },
    "ChoiceModel": {
      "required": [ "QuestionId" ],
      "type": "object",
      "properties": {
        "QuestionId": { "type": "string" },
        "AnswerIds": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        },
        "Other": { "type": "string" }
      }
    },
    "ResponseModel[IsUsOrCanadaNumberResponse]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/IsUsOrCanadaNumberResponse" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "IsUsOrCanadaNumberResponse": {
      "required": [ "IsUsOrCanadaPhoneNum" ],
      "type": "object",
      "properties": { "IsUsOrCanadaPhoneNum": { "type": "boolean" } }
    },
    "VersionModel": {
      "type": "object",
      "properties": { "Version": { "type": "string" } }
    },
    "PostWalletMigrationModel": {
      "type": "object",
      "properties": {
        "SourcePrivateKey": { "type": "string" },
        "PubKey": { "type": "string" },
        "EncodedPrivateKey": { "type": "string" }
      }
    },
    "ResponseModel[GetWaletsRespModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/GetWaletsRespModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "GetWaletsRespModel": {
      "type": "object",
      "properties": {
        "Lykke": { "$ref": "#/definitions/LykkeWalletsModel" },
        "BankCards": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiBankCardModel" }
        },
        "MultiSig": { "type": "string" },
        "ColoredMultiSig": { "type": "string" },
        "SolarCoinAddress": { "type": "string" }
      }
    },
    "LykkeWalletsModel": {
      "required": [ "Equity" ],
      "type": "object",
      "properties": {
        "Assets": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/ApiWalletAssetModel" }
        },
        "Equity": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ApiBankCardModel": {
      "required": [ "MonthTo", "YearTo" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Type": { "type": "string" },
        "LastDigits": { "type": "string" },
        "Name": { "type": "string" },
        "MonthTo": {
          "format": "int32",
          "type": "integer"
        },
        "YearTo": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ApiWalletAssetModel": {
      "required": [ "Balance", "HideIfZero", "Accuracy", "Reserved" ],
      "type": "object",
      "properties": {
        "Id": { "type": "string" },
        "Name": { "type": "string" },
        "Balance": {
          "format": "double",
          "type": "number"
        },
        "Symbol": { "type": "string" },
        "AssetPairId": { "type": "string" },
        "HideIfZero": { "type": "boolean" },
        "IssuerId": { "type": "string" },
        "Accuracy": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryId": { "type": "string" },
        "AmountInBase": {
          "format": "double",
          "type": "number"
        },
        "Reserved": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "SubmitKeysModel": {
      "type": "object",
      "properties": {
        "AssetId": { "type": "string" },
        "BcnWallet": { "$ref": "#/definitions/BcnWallet" }
      }
    },
    "BcnWallet": {
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "EncodedKey": { "type": "string" },
        "PublicKey": { "type": "string" }
      }
    },
    "ResponseModel[DepositAddressModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/DepositAddressModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "DepositAddressModel": {
      "type": "object",
      "properties": {
        "Address": { "type": "string" },
        "AddressExtension": { "$ref": "#/definitions/BcnAddressExtensionModel" }
      }
    },
    "ResponseModel[ApiWalletAssetModel]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/ApiWalletAssetModel" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "ResponseModel[IEnumerable[WatchList]]": {
      "type": "object",
      "properties": {
        "Result": {
          "uniqueItems": false,
          "type": "array",
          "items": { "$ref": "#/definitions/WatchList" }
        },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "WatchList": {
      "required": [ "Order", "ReadOnlyProperty" ],
      "type": "object",
      "properties": {
        "AssetIds": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        },
        "Id": { "type": "string" },
        "Name": { "type": "string" },
        "Order": {
          "format": "int32",
          "type": "integer"
        },
        "ReadOnly": { "type": "boolean" }
      }
    },
    "CustomWatchListCreateModel": {
      "required": [ "Order" ],
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "Order": {
          "format": "int32",
          "type": "integer"
        },
        "AssetIds": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "ResponseModel[WatchList]": {
      "type": "object",
      "properties": {
        "Result": { "$ref": "#/definitions/WatchList" },
        "Error": { "$ref": "#/definitions/ErrorModel" }
      }
    },
    "CustomWatchListUpdateModel": {
      "required": [ "Order" ],
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "Order": {
          "format": "int32",
          "type": "integer"
        },
        "AssetIds": {
          "uniqueItems": false,
          "type": "array",
          "items": { "type": "string" }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "flow": "implicit",
      "authorizationUrl": "http://auth.lykke.com/connect/authorize",
      "type": "oauth2"
    }
  },
  "security": [ { "oauth2": [] } ]
}